1
00:00:00,080 --> 00:00:02,430
Konten berikut diberikan
di bawah lisensi

2
00:00:02,430 --> 00:00:03,810
Creative Commons.

3
00:00:03,810 --> 00:00:06,060
Dukungan Anda akan membantu
MIT OpenCourseWare

4
00:00:06,060 --> 00:00:10,150
untuk terus menyediakan bahan edukasi
berkualitas tinggi secara gratis

5
00:00:10,150 --> 00:00:12,700
Untuk berdonasi, atau
melihat materi tambahan

6
00:00:12,700 --> 00:00:16,600
dari ratusan kuliah MIT,
kunjungi MIT OpenCourseWare

7
00:00:16,600 --> 00:00:17,305
di ocw.mit.edu.

8
00:00:26,520 --> 00:00:29,520
PROFESOR: Sekarang lihat
bagaimana web menggunakan

9
00:00:29,520 --> 00:00:32,770
protokol kriptografis untuk
melindungi komunikasi jaringan

10
00:00:32,770 --> 00:00:36,142
dan berhadapan dengan
faktor-faktor jaringan secara umum.


11
00:00:36,142 --> 00:00:37,600
Jadi sebelum kita menyelam
ke dalam detail,

12
00:00:37,600 --> 00:00:39,641
saya ingin mengingatkan Anda
bahwa ada kuis pada hari Rabu.

13
00:00:39,641 --> 00:00:41,350
Dan akan dilakukan di ruangan ini.

14
00:00:41,350 --> 00:00:42,730
Akan dilakukan di Walker.

15
00:00:42,730 --> 00:00:45,559
Tapi akan dilakukan
pada waktu kuliah reguler.

16
00:00:45,559 --> 00:00:46,600
Ada pertanyaan terkait hal tersebut?

17
00:00:46,600 --> 00:00:49,002
Semoga cukup jelas.

18
00:00:49,002 --> 00:00:50,460
Lantai tiga, saya
rasa biasanya di sana.

19
00:00:53,340 --> 00:00:54,220
Baiklah.

20
00:00:54,220 --> 00:00:58,654
Jadi hari ini kita akan membicarakan
tentang bagaimana web menggunakan

21
00:00:58,654 --> 00:01:00,570
kriptografi untuk melindungi
komunikasi jaringan.

22
00:01:00,570 --> 00:01:03,800
Dan kita akan melihat dua
topik yang sangat berkaitan.

23
00:01:03,800 --> 00:01:07,090
Yang pertama adalah, bagaimana Anda
hanya melindungi secara kriptografis

24
00:01:07,090 --> 00:01:09,890
komunikasi pada skala yang
lebih besar dari sistem Kerberos

25
00:01:09,890 --> 00:01:11,956
yang kita lihat di kuliah sebelumnya?

26
00:01:11,956 --> 00:01:14,330
Selain itu, kita akan melihat
bagaimana Anda sebenarnya

27
00:01:14,330 --> 00:01:16,970
mengintegrasikan proteksi
kriptografi yang diberikan ke Anda

28
00:01:16,970 --> 00:01:19,940
pada tingkat jaringan ke dalam
keseluruhan aplikasi.

29
00:01:19,940 --> 00:01:22,190
Jadi bagaimana peramban
web memanfaatkan

30
00:01:22,190 --> 00:01:25,090
garansi apapun yang
disediakan oleh

31
00:01:25,090 --> 00:01:26,600
protokol kriptografis?

32
00:01:26,600 --> 00:01:29,990
Dan keduanya ini sangat
berkaitan, dan ternyata

33
00:01:29,990 --> 00:01:32,730
memproteksi komunikasi
jaringan relatif mudah.

34
00:01:32,730 --> 00:01:34,880
Kriptografi biasanya bekerja dengan baik.

35
00:01:34,880 --> 00:01:37,960
Dan mengintegrasikannya,
dan menggunakannya

36
00:01:37,960 --> 00:01:40,020
pada tingkat yang lebih
tinggi pada peramban,

37
00:01:40,020 --> 00:01:41,790
sebenarnya bagian yang
lebih rumit,

38
00:01:41,790 --> 00:01:44,260
bagaimana sebenarnya membangun
sistem dalam kriptografi.

39
00:01:46,290 --> 00:01:48,700
Sebelum kita menyelam ke
seluruh diskusi ini,

40
00:01:48,700 --> 00:01:52,900
Saya ingin mengingatkan
Anda jenis-jenis

41
00:01:52,900 --> 00:01:55,670
primitif kriptografi
yang akan kita lakukan di sini.

42
00:01:55,670 --> 00:01:59,580
Jadi pada kuliah sebelumnya pada
Kerberos, kita pada dasarnya

43
00:01:59,580 --> 00:02:04,320
menggunakan sesuatu yang disebut
sebagai kriptografi simetris, atau

44
00:02:04,320 --> 00:02:05,630
enkripsi dan dekripsi.

45
00:02:05,630 --> 00:02:09,910
Dan rencananya di sini adalah
bahwa Anda punya kunci rahasia k,

46
00:02:09,910 --> 00:02:11,340
dan Anda punya dua fungsi.

47
00:02:11,340 --> 00:02:14,070
Jadi Anda dapat mengambil
bagian dari data,

48
00:02:14,070 --> 00:02:16,220
mari kita panggil itu p untuk
plaintext, dan Anda

49
00:02:16,220 --> 00:02:18,170
dapat mengaplikasikan fungsi
enkripsi, itu adalah

50
00:02:18,170 --> 00:02:20,210
sebuah fungsi dari kunci k.

51
00:02:20,210 --> 00:02:24,150
Dan jika Anda mengenkripsi plain
text ini, Anda akan mendapatkan ciphertext c.

52
00:02:24,150 --> 00:02:26,380
Dan mirip dengan itu, ada
fungsi dekripsi

53
00:02:26,380 --> 00:02:28,930
d, yang jika diberikan kunci yang sama k.

54
00:02:28,930 --> 00:02:31,860
Dan ciphertext akan memberikan
Anda kembali plaintext nya.

55
00:02:31,860 --> 00:02:35,880
Jadi ini adalah primitif yang
menjadi dasar Kerberos.

56
00:02:35,880 --> 00:02:38,240
Tetapi ternyata ada primitif
lain juga,

57
00:02:38,240 --> 00:02:40,360
yang akan berguna untuk
diskusi hari ini.

58
00:02:40,360 --> 00:02:46,350
Dan ini dinamakan enkripsi
dan dekripsi asimetris.

59
00:02:46,350 --> 00:02:49,520
Idenya adalah untuk menggunakan
kunci berbeda untuk enkripsi

60
00:02:49,520 --> 00:02:50,260
dan dekripsi.

61
00:02:50,260 --> 00:02:52,505
Kita akan lihat mengapa ini sangat berguna.

62
00:02:52,505 --> 00:02:54,380
Dan secara khusus, fungsi-
fungsi yang Anda dapatkan

63
00:02:54,380 --> 00:02:58,300
adalah, Anda dapat mengenkripsinya
dengan kunci publik tertentu

64
00:02:58,300 --> 00:03:00,990
dengan pesan tertentu dan
mendapatkan ciphertext nya.

65
00:03:00,990 --> 00:03:02,550
Dan untuk melakukan
dekripsi, Anda cukup

66
00:03:02,550 --> 00:03:07,380
memberikan kunci privat yang terkait
untuk mendapatkan kembali plaintext nya.

67
00:03:07,380 --> 00:03:10,400
Dan hal yang menarik kali ini adalah
Anda dapat mempublikasikan kunci publik ini

68
00:03:10,400 --> 00:03:12,320
di mana-mana di internet,
dan setiap orang

69
00:03:12,320 --> 00:03:15,180
dapat mengenkripsi pesan untuk Anda,
tetapi Anda membutuhkan kunci private

70
00:03:15,180 --> 00:03:16,790
untuk bisa mendekripsi
pesannya.

71
00:03:16,790 --> 00:03:19,910
Dan kita akan melihat bagaimana
ini digunakan pada protokol.

72
00:03:19,910 --> 00:03:26,200
Dan pada praktiknya Anda
akan menggunakan kriptografi kunci publik

73
00:03:26,200 --> 00:03:27,960
dengan cara yang sedikit berbeda.

74
00:03:27,960 --> 00:03:30,050
Jadi alih-alih mengenkripsi
dan mendekripsi pesan-pesan,

75
00:03:30,050 --> 00:03:34,510
Anda sebenarnya mungkin ingin 
menandatangani atau memverifikasi pesan-pesan.

76
00:03:34,510 --> 00:03:36,390
Ternyata pada tingkat
implementasi

77
00:03:36,390 --> 00:03:41,162
ini adalah operasi yang berkaitan, tetapi pada
tingkat API (Application Programming Interface)

78
00:03:41,162 --> 00:03:42,870
keduanya akan terlihat
sedikit berbeda.

79
00:03:42,870 --> 00:03:47,350
Jadi Anda mungkin akan menemukan
pesan dengan kunci privat Anda,

80
00:03:47,350 --> 00:03:50,160
dan Anda akan mendapatkan semacam
tanda tangan (signature) s.

81
00:03:50,160 --> 00:03:53,930
Dan Anda juga dapat
memverifikasi pesan ini menggunakan

82
00:03:53,930 --> 00:03:55,340
pasangan kunci publiknya.

83
00:03:55,340 --> 00:04:00,040
Dan Anda mendapat pesannya, dan
tanda tangan, dan hasilnya,

84
00:04:00,040 --> 00:04:02,590
dan sebuah boolean yang
menyatakan apakah ini

85
00:04:02,590 --> 00:04:06,040
adalah tanda tangan yang tepat
untuk pesan tersebut.

86
00:04:06,040 --> 00:04:08,460
Dan ada semacam garansi
secara intuitif

87
00:04:08,460 --> 00:04:11,630
bahwa fungsi-fungsi ini memberikan
jika Anda, misalnya, punya

88
00:04:11,630 --> 00:04:13,520
tanda tangan ini dan fungsi
tersebut memverifikasi dengan benar,

89
00:04:13,520 --> 00:04:15,710
maka tanda tangan tersebut pasti
dibangkitkan oleh seseorang

90
00:04:15,710 --> 00:04:16,930
yang memiliki kunci privat yang benar.

91
00:04:18,990 --> 00:04:21,740
Apakah masuk akal, dilihat
dari primitif yang kita punya?

92
00:04:21,740 --> 00:04:22,790
Baiklah.

93
00:04:22,790 --> 00:04:24,690
Mari kita mencoba
memahami--

94
00:04:26,636 --> 00:04:28,385
Bagaimana kita memproteksi
komunikasi jaringan

95
00:04:28,385 --> 00:04:30,520
pada skala yang lebih besar di Kerberos.

96
00:04:30,520 --> 00:04:33,650
Pada Kerberos, kita punya model
yang relatif sederhana

97
00:04:33,650 --> 00:04:37,810
di mana semua
pengguna dan server

98
00:04:37,810 --> 00:04:41,330
memiliki semacam relasi
dengan entitas KDC ini.

99
00:04:41,330 --> 00:04:43,790
Dan entitas KDC ini
punya tabel raksasa

100
00:04:43,790 --> 00:04:46,695
dari prinsipal dan kunci-kunci mereka.

101
00:04:49,260 --> 00:04:51,940
Dan kapanpun seorang pengguna
ingin berkomunikasi dengan server tertentu,

102
00:04:51,940 --> 00:04:55,010
mereka harus meminta KDC
untuk membangkitkan tiket berdasarkan

103
00:04:55,010 --> 00:04:58,340
tabel raksasa yang
KDC miliki tersebut.

104
00:04:58,340 --> 00:05:00,890
Jadi ini sepertinya model
yang cukup sederhana.


105
00:05:00,890 --> 00:05:02,320
Mengapa kita membutuhkan
sesuatu yang lebih?

106
00:05:02,320 --> 00:05:06,180
Mengapa Kerberos tidak
cukup untuk web?

107
00:05:06,180 --> 00:05:08,599
Mengapa web tidak menggunakan
Kerberos untuk mengamankan

108
00:05:08,599 --> 00:05:09,390
seluruh komunikasi?

109
00:05:13,059 --> 00:05:14,927
AUDIENS: [TIDAK TERDENGAR]

110
00:05:16,224 --> 00:05:16,890
PROFESOR: Yah.

111
00:05:16,890 --> 00:05:24,730
Jadi di ini ada KDC tunggal,
yang harus dipercayai oleh semua pihak.

112
00:05:24,730 --> 00:05:27,340
Jadi ini, sepertinya, tidak bagus.

113
00:05:27,340 --> 00:05:29,100
Jadi Anda mungkin tidak
ingin benar-benar mempercayai

114
00:05:29,100 --> 00:05:31,420
bahwa ada mesin di luar sana
yang aman untuk digunakan oleh

115
00:05:31,420 --> 00:05:32,792
semua orang di seluruh dunia.

116
00:05:32,792 --> 00:05:34,250
Seperti, ya, mungkin
orang-orang di MIT

117
00:05:34,250 --> 00:05:36,240
mau mempercayai seseorang di ISNT
(Biro Teknologi Informasi milik MIT)

118
00:05:36,240 --> 00:05:38,640
untuk menjalankan KDC di sana.

119
00:05:38,640 --> 00:05:39,140
Baiklah.

120
00:05:39,140 --> 00:05:42,134
Jadi hal itu sepertinya masuk akal, yah.

121
00:05:42,134 --> 00:05:43,195
AUDIENS: [TIDAK TERDENGAR]

122
00:05:43,195 --> 00:05:43,820
PROFESOR: Ya.

123
00:05:43,820 --> 00:05:45,520
Manajemen kunci cukup
sulit, saya rasa, yah.

124
00:05:45,520 --> 00:05:49,778
Jadi apa yang saya maksudkan
tentang manajemen kunci--

125
00:05:51,236 --> 00:05:53,666
AUDIENS: [TIDAK TERDENGAR]

126
00:06:02,715 --> 00:06:03,340
PROFESOR: Ya.

127
00:06:03,340 --> 00:06:06,570
Jadi mungkin hal sulit
untuk membuat KDC di mana

128
00:06:06,570 --> 00:06:09,990
kita dapat mengelola satu milyar kunci,
atau sepuluh milyar kunci, untuk seluruh

129
00:06:09,990 --> 00:06:11,340
orang di dunia.

130
00:06:11,340 --> 00:06:13,840
Jadi itu mungkin
proposisi yang sulit diterima.

131
00:06:13,840 --> 00:06:15,340
Jika itu bukan yang
terjadi, maka saya rasa

132
00:06:15,340 --> 00:06:18,920
kekurangan lain dari Kerberos
adalah seluruh pengguna sebenarnya

133
00:06:18,920 --> 00:06:23,415
harus punya kunci, atau
dikenal oleh KDC.

134
00:06:26,010 --> 00:06:28,467
Jadi, Anda bahkan tidak dapat
menggunakan Kerberos di MIT

135
00:06:28,467 --> 00:06:30,425
untuk terkoneksi ke sebuah server,
kecuali Anda sendiri

136
00:06:30,425 --> 00:06:33,520
memiliki akun dalam
basis data Kerberos.

137
00:06:33,520 --> 00:06:36,400
Di mana di web, hal yang
sangat mungkin

138
00:06:36,400 --> 00:06:38,192
di mana Anda datang ke
sebuah komputer,

139
00:06:38,192 --> 00:06:39,733
komputer yang tidak tahu
sama sekali siapa Anda,

140
00:06:39,733 --> 00:06:41,890
tetapi Anda dapat tetap pergi
ke situs web Amazon yang diamankan

141
00:06:41,890 --> 00:06:43,730
dengan kriptografi..

142
00:06:43,730 --> 00:06:44,612
Yah?

143
00:06:44,612 --> 00:06:46,058
AUDIENS: [TIDAK TERDENGAR]

144
00:06:50,775 --> 00:06:51,900
PROFESOR: Itu ide kita.

145
00:06:51,900 --> 00:06:53,530
Jadi ada pertimbangan-
pertimbangan ini.

146
00:06:53,530 --> 00:06:55,130
Jadi ada kerahasiaan privat
yang terjaga sampai masa depan.

147
00:06:55,130 --> 00:06:56,546
Ada beberapa
hal lain

148
00:06:56,546 --> 00:06:58,260
yang Anda inginkan dari
protokol kriptografis,

149
00:06:58,260 --> 00:07:00,472
dan kita akan melihatnya
dan bagaimana mereka muncul

150
00:07:00,472 --> 00:07:01,407
di SSL.

151
00:07:01,407 --> 00:07:03,490
Tapi kuncinya adalah bahwa
solusinya sama dengan

152
00:07:03,490 --> 00:07:06,170
solusi yang dilakukan
pada Kerberos,

153
00:07:06,170 --> 00:07:09,514
dan yang dilakukan pada SSL
atau TLS untuk mengatasi hal-hal tersebut.

154
00:07:09,514 --> 00:07:10,680
Tapi Anda benar.

155
00:07:10,680 --> 00:07:12,840
Protokol Keberos
yang kita baca dan dalami

156
00:07:12,840 --> 00:07:16,150
pada paper tersebut sudah cukup lama.

157
00:07:16,150 --> 00:07:18,250
Jadi, bahkan jika kalian ingin
menggunakannya untuk web,

158
00:07:18,250 --> 00:07:21,860
kalian harus melakukan
beberapa perubahan pada protokol tersebut

159
00:07:21,860 --> 00:07:26,190
Perubahannya tidak besar,
pada tingkatan [TIDAK TERDENGAR].

160
00:07:26,190 --> 00:07:28,280
Adakah pendapat lain mengapa
kita harus menggunakan Kerberos?

161
00:07:28,280 --> 00:07:29,095
Ya?

162
00:07:29,095 --> 00:07:30,580
HADIRIN : [TIDAK TERDENGAR]

163
00:07:36,277 --> 00:07:38,110
PROFESSOR: Ini
sebenernya tidak terlalu skalabel.

164
00:07:40,815 --> 00:07:41,440
Yeah, perbaikan.

165
00:07:44,240 --> 00:07:45,790
Mungkin pendafataranya
bahkan, juga,

166
00:07:45,790 --> 00:07:48,100
sepertinya Anda harus mendatangi
kantor tertentu

167
00:07:48,100 --> 00:07:49,050
untuk mendapatkan sebuah akun.

168
00:07:49,050 --> 00:07:50,406
Ya?

169
00:07:50,406 --> 00:07:52,160
AUDIENS: [TIDAK TERDENGAR]
harus online.

170
00:07:52,160 --> 00:07:54,120
PROFESSOR: Ya, jadi
itu merupakan masalah lain.

171
00:07:54,120 --> 00:07:55,620
Hal-hal ini adalah semacam
masalah manajemen,

172
00:07:55,620 --> 00:07:59,794
tetapi pada tingkat
protokol, KDC

173
00:07:59,794 --> 00:08:01,460
harus online
karena sebenarnya dia

174
00:08:01,460 --> 00:08:03,635
memediasi setiap interaksi 
yang Anda lakukan dengan layanan.

175
00:08:05,289 --> 00:08:07,830
Artinya, di web, setiap 
kali Anda membuka situs web baru,

176
00:08:07,830 --> 00:08:10,130
Anda harus berbicara
terlebih dahulu dengan KDC, yang mana

177
00:08:10,130 --> 00:08:11,940
akan terjadi sedikit 
penghambatan kinerja.

178
00:08:11,940 --> 00:08:13,520
Jadi seperti 
jenis skalabilitas lainnya,

179
00:08:13,520 --> 00:08:15,680
ini seperti
skalabilitas kinerja.

180
00:08:15,680 --> 00:08:18,900
Ini lebih merupakan 
seperti jenis skalabilitas manajemen.

181
00:08:18,900 --> 00:08:19,470
Masuk akal?

182
00:08:22,030 --> 00:08:24,040
Jadi, bagaimana kita
menyelesaikan masalah ini

183
00:08:24,040 --> 00:08:27,160
dengan primitif yang lebih baik ini?

184
00:08:27,160 --> 00:08:31,330
Nah, idenya adalah menggunakan 
kunci publik kriptografi untuk

185
00:08:31,330 --> 00:08:33,980
mengesampingkan KDC ini.

186
00:08:33,980 --> 00:08:35,880
Jadi mari kita 
cari tahu dulu apakah kita

187
00:08:35,880 --> 00:08:40,419
dapat membangun keamanan
komunikasi jika Anda mengetahui

188
00:08:40,419 --> 00:08:41,669
kunci publik yang dimiliki oleh pihak lain.

189
00:08:41,669 --> 00:08:43,710
Dan kemudian kita akan
melihat bagaimana kita memasang

190
00:08:43,710 --> 00:08:46,840
sebuah versi kunci publik dari sebuah
KDC untuk mengautentikasi pihak-pihak

191
00:08:46,840 --> 00:08:50,080
dalam protokol ini.

192
00:08:50,080 --> 00:08:54,194
Jika Anda tidak mau
menggunakan KDC, apa

193
00:08:54,194 --> 00:08:55,652
yang bisa Anda lakukan dengan
kriptografi kunci publik

194
00:08:55,652 --> 00:08:58,190
adalah mungkin Anda bisa
pelajari kunci publik tersebut

195
00:08:58,190 --> 00:08:59,440
dari kunci publik dari
nilai lain pada sebuah penghubung.

196
00:08:59,440 --> 00:09:01,690
Jadi di Kerberos, jika saya mau
terhubung ke server berkas,

197
00:09:01,690 --> 00:09:04,330
mungkin saya hanya mengetahui
kunci publik dari file server

198
00:09:04,330 --> 00:09:05,190
dari suatu tempat.

199
00:09:05,190 --> 00:09:07,510
Seperti saya sebagai orang baru mendapatkan
sebuah hasil cetak yang menyatakan bahwa server

200
00:09:07,510 --> 00:09:09,260
berkas memiliki kunci publik sebagai ini.

201
00:09:09,260 --> 00:09:12,450
Anda kemudian dapat melanjutkan
dan memulai koneksi.

202
00:09:12,450 --> 00:09:14,760
Cara yang mungkin bagi Anda
untuk melakukan hal ini adalah Anda

203
00:09:14,760 --> 00:09:18,552
dapat mengenkripsi sebuah pesan
untuk kunci publik dari server

204
00:09:18,552 --> 00:09:20,010
berkas yang Anda 
ingin hubungi.

205
00:09:20,010 --> 00:09:22,460
Tapi ternyata
dalam praktiknya, 

206
00:09:22,460 --> 00:09:24,541
operasi kunci publik ini
beroperasi sangat lambat.

207
00:09:24,541 --> 00:09:26,040
Operasi kunci publik
beberapa kali

208
00:09:26,040 --> 00:09:29,260
lebih lambat dari kriptografi
kunci simetris.

209
00:09:29,260 --> 00:09:33,520
Jadi hampir selalu Anda ingin menggunakan
alternatif lain dari  penggunaan kripto publik

210
00:09:33,520 --> 00:09:35,440
secepat mungkin itu bisa dilakukan secara praktis.

211
00:09:35,440 --> 00:09:37,320
Jadi protokol yang tipikal
mungkin terlihat seperti ini

212
00:09:37,320 --> 00:09:40,020
di mana Anda memiliki a dan b, dan
mereka ingin berkomunikasi.

213
00:09:40,020 --> 00:09:41,990
Dan a mengetahui kunci publik b.

214
00:09:41,990 --> 00:09:44,480
Jadi apa yang dapat terjadi adalah
a dapat membangkitkan

215
00:09:44,480 --> 00:09:46,445
semacam sesi s.

216
00:09:49,840 --> 00:09:51,380
Cukup memilih suatu angka acak.

217
00:09:51,380 --> 00:09:56,210
Dan dia akan mengirimkan
ke b kunci sesi s tersebut.

218
00:09:56,210 --> 00:09:58,550
Jadi ini semacam
terlihat seperti Kerberos.

219
00:09:58,550 --> 00:10:01,840
Dan kita akan mengenkripsi
sesi s untuk kuncinya b.

220
00:10:01,840 --> 00:10:03,860
Dan ingat di Kerberos,
untuk melakukan ini,

221
00:10:03,860 --> 00:10:05,590
Kita harus memiliki
KDC untuk mengerjakan ini untuk kita

222
00:10:05,590 --> 00:10:08,095
karena a tidak
tahu kunci untuk b,

223
00:10:08,095 --> 00:10:10,720
atau tidak diperbolehkan untuk
tahu karena itu adalah sebuah rahasia.

224
00:10:10,720 --> 00:10:12,197
Tapi seharusnya hanya b yang tahu.

225
00:10:12,197 --> 00:10:14,280
Dengan kriptografi kunci publik
Anda sebenarnya bisa melakukannya sekarang.

226
00:10:14,280 --> 00:10:21,730
Kita bisa cukup mengenkripsi
s menggunakan kunci publik ini.

227
00:10:21,730 --> 00:10:23,555
Dan kita kirimkan 
pesan ini ke b.

228
00:10:23,555 --> 00:10:25,500
B sekarang dapat mendekripsi 
pesan ini, dan berkata saya

229
00:10:25,500 --> 00:10:27,500
sebaiknya menggunakan kunci rahasia ini.

230
00:10:27,500 --> 00:10:30,930
Dan sekarang kita bisa punya 
saluran komunikasi di mana

231
00:10:30,930 --> 00:10:32,890
semua pesan 
cukup dienkripsikan

232
00:10:32,890 --> 00:10:37,560
dengan kunci rahasia s ini.

233
00:10:37,560 --> 00:10:38,971
Apakah hal ini masuk akal?

234
00:10:38,971 --> 00:10:41,220
Jadi ada beberapa properti bagus
dari protokol ini.

235
00:10:41,220 --> 00:10:43,280
Salah satunya adalah kita dapat
menghilangkan syarat memiliki

236
00:10:43,280 --> 00:10:47,339
sebuah KDC yang online untuk membangkitkan
kunci sesi untuk kita.

237
00:10:47,339 --> 00:10:48,880
Kita hanya perlu
salah satu pihak

238
00:10:48,880 --> 00:10:51,670
untuk membangkitkan kunci sesi dan kemudian
mengenkripsikan kunci tersebut untuk pihak lain

239
00:10:51,670 --> 00:10:54,040
tanpa melibatkan KDC.

240
00:10:54,040 --> 00:10:56,070
Keuntungan lainnya
adalah kita mungkin

241
00:10:56,070 --> 00:10:59,480
cukup percaya diri bahwa
pesan yang dikirim oleh a kepada b

242
00:10:59,480 --> 00:11:01,190
hanya akan dibaca oleh b.

243
00:11:01,190 --> 00:11:04,670
Karena hanya b yang bisa
mendekripsi pesan ini.

244
00:11:04,670 --> 00:11:06,565
Dan oleh karena itu,
hanya b yang seharusnya memiliki

245
00:11:06,565 --> 00:11:09,640
kunci rahasia s yang berkaitan tersebut.

246
00:11:09,640 --> 00:11:11,030
Tapi ini cukup bagus.

247
00:11:11,030 --> 00:11:12,700
Ada pertanyaan mengenai
protokol ini?

248
00:11:12,700 --> 00:11:13,260
Ya?

249
00:11:13,260 --> 00:11:16,146
AUDIENS: Apakah ada pengaruhnya,
terkait siapa yang membangkitkan

250
00:11:16,146 --> 00:11:18,560
kode sandi, klien atau server?

251
00:11:18,560 --> 00:11:20,150
PROFESSOR: Ya, mungkin.

252
00:11:20,150 --> 00:11:25,760
Saya pikir itu tergantung 
tepatnya pertimbangan,

253
00:11:25,760 --> 00:11:28,080
atau properti yang Anda
inginkan dari protokol ini.

254
00:11:28,080 --> 00:11:35,320
Jadi di sini, tentu jika implementasi a banyak mengandung
kesalahan atau memilih nilai acak yang buruk,

255
00:11:35,320 --> 00:11:38,420
server kemudian mengirimkan
data kembali ke a, berpikir,

256
00:11:38,420 --> 00:11:40,970
oh, saat ini hanya data inilah
yang akan terlihat oleh a.

257
00:11:40,970 --> 00:11:43,320
Baik, mungkin itu tidak
terlalu benar.

258
00:11:43,320 --> 00:11:45,020
Jadi Anda mungkin harus sedikit berhati-hati.

259
00:11:45,020 --> 00:11:47,270
Ada beberapa masalah
lain pada protokol ini,

260
00:11:47,270 --> 00:11:48,030
juga.

261
00:11:48,030 --> 00:11:49,226
Pertanyaan?

262
00:11:49,226 --> 00:11:52,810
AUDIENS: Saya tadinya akan mengatakan
bahwa dalam protokol ini,

263
00:11:52,810 --> 00:11:55,060
anda dapat langsung melakukan [TIDAK TERDENGAR]

264
00:11:58,021 --> 00:11:59,770
PROFESSOR: Betul, hal itu
sebenarnya tidak bagus.

265
00:11:59,770 --> 00:12:01,728
Jadi sebenarnya ada
beberapa masalah dengan protokol ini.

266
00:12:01,728 --> 00:12:05,660
Salah satunya adalah pengiriman ulang (replay).

267
00:12:05,660 --> 00:12:09,436
Jadi masalahnya disini
adalah bahwa saya bisa saja

268
00:12:09,436 --> 00:12:10,810
mengirim pesan-pesan ini
lagi dan itu

269
00:12:10,810 --> 00:12:14,060
terlihat seperti a sedang mengirimkan
pesan-pesan ini kepada b, dan seterusnya.

270
00:12:14,060 --> 00:12:16,160
Jadi biasanya
solusi untuk ini

271
00:12:16,160 --> 00:12:18,640
adalah membuat kedua
pihak berpartisipasi

272
00:12:18,640 --> 00:12:22,470
pada pembangkitan
s, dan memastikan

273
00:12:22,470 --> 00:12:25,230
bahwa kunci yang kita
gunakan sekarang baru.

274
00:12:25,230 --> 00:12:27,840
Karena disini, karena b sebenarnya
tidak membangkitkan apapun,

275
00:12:27,840 --> 00:12:30,310
pesan-pesan protokol ini terlihat
persis sama setiap saat.

276
00:12:30,310 --> 00:12:33,410
Jadi biasanya, yang terjadi
adalah, salah satu pihak memilih

277
00:12:33,410 --> 00:12:36,630
sebuah angka acak seperti s, 
lalu pihak lain b juga

278
00:12:36,630 --> 00:12:39,417
memilih beberapa angka acak,
secara khusus disebut nonce.

279
00:12:39,417 --> 00:12:40,000
Tapi, bagaimanapun.

280
00:12:40,000 --> 00:12:41,630
Ada dua angka.

281
00:12:41,630 --> 00:12:43,877
Dan kemudian kunci yang mereka 
setujui untuk digunakan dalam hal

282
00:12:43,877 --> 00:12:45,460
yang dipilih salah satu pihak,
tetapi sebenarnya adalah

283
00:12:45,460 --> 00:12:48,610
hash dari hal-hal 
yang mereka berdua pilih.

284
00:12:48,610 --> 00:12:49,890
Jadi Anda bisa melakukan itu.

285
00:12:49,890 --> 00:12:52,509
Anda juga bisa melakukan 
hal-hal Diffie-Hellman (key exhcange)

286
00:12:52,509 --> 00:12:54,050
seperti yang kita lihat
di kuliah sebelum ini

287
00:12:54,050 --> 00:12:55,650
di mana Anda mendapatkan forward secrecy.
(kerahasiaan di masa mendatang)

288
00:12:55,650 --> 00:12:58,220
Matematikanya sedikit 
lebih rumit daripada

289
00:12:58,220 --> 00:13:01,117
hanya melakukan hash dari dua angka acak 
yang dipilih dua pihak.

290
00:13:01,117 --> 00:13:02,700
Tapi kemudian Anda mendapatkan
beberapa properti bagus,

291
00:13:02,700 --> 00:13:05,610
seperti kerahasiaan pengiriman.

292
00:13:05,610 --> 00:13:07,600
Jadi replay attacks (serangan berbasis pengulangan)
yang Anda biasanya perbaiki

293
00:13:07,600 --> 00:13:14,350
dengan meminta b untuk memgbangkitkan beberapa nonce.

294
00:13:14,350 --> 00:13:16,850
Dan setelah itu Anda menentukan
kunci rahasia yang sebenarnya

295
00:13:16,850 --> 00:13:19,900
yang akan Anda gunakan
untuk melakukan hash dari kunci rahasia

296
00:13:19,900 --> 00:13:24,267
dari sesuatu yang tersambung (concatenated)
dengan nonce ini.

297
00:13:24,267 --> 00:13:26,350
Dan tentu saja b akan
harus mengirim kembali nonce

298
00:13:26,350 --> 00:13:29,220
ke a untuk dapat
mengetahui tahu apa

299
00:13:29,220 --> 00:13:32,850
yang sedang terjadi sehingga mereka
berdua dapat sepakat pada sebuah kunci.

300
00:13:32,850 --> 00:13:33,670
Baiklah.

301
00:13:33,670 --> 00:13:40,060
Jadi masalah lain di sini adalah
tidak benar-benar ada autentikasi

302
00:13:40,060 --> 00:13:40,990
pada a di sini, ya kan?

303
00:13:40,990 --> 00:13:43,610
Jadi a tahu siapa b,
atau setidaknya a

304
00:13:43,610 --> 00:13:46,700
mengetahui siapa yang bisa
mendekripsikan data tersebut.

305
00:13:46,700 --> 00:13:50,390
Tapi b tidak tahu siapa yang
ada di sisi satunya,

306
00:13:50,390 --> 00:13:54,630
apakah itu a atau seorang jahat yang
menyamar sebagai a, dan sebagainya.

307
00:13:54,630 --> 00:13:58,741
Jadi bagaimana kita memperbaikinya
di dunia kunci publik ini?

308
00:13:58,741 --> 00:13:59,240
Ya?

309
00:13:59,240 --> 00:14:01,854
AUDIENS: Anda telah ditandai
sesuatu dan [TIDAK TERDENGAR].

310
00:14:01,854 --> 00:14:02,520
PROFESOR: Ya.

311
00:14:02,520 --> 00:14:05,390
Terdapat beberapa cara
Anda bisa melakukan ini.

312
00:14:05,390 --> 00:14:07,510
Satu kemungkinan
adalah a mungkin harus 

313
00:14:07,510 --> 00:14:09,630
menandai pesan ini
awalnya, karena kita

314
00:14:09,630 --> 00:14:11,160
memiliki primitif penanda yang bagus ini.

315
00:14:11,160 --> 00:14:19,040
Jadi, kita dapat menandai
pesan ini dengan kunci rahasia milik a.

316
00:14:19,040 --> 00:14:20,829
Dan penanda itu hanya
menyediakan tanda tangan,

317
00:14:20,829 --> 00:14:22,370
tapi anggap saja Anda
menandainya dan juga

318
00:14:22,370 --> 00:14:24,400
memberikan pesannya juga.

319
00:14:24,400 --> 00:14:27,750
Dan kemudian b harus
mengetahui kunci publik milik a agar

320
00:14:27,750 --> 00:14:29,370
dapat memverifikasi tanda tangan ini.

321
00:14:29,370 --> 00:14:32,229
Jika b mengetahui 
kunci publik milik a, maka b

322
00:14:32,229 --> 00:14:34,520
dapat memiliki alasan 
untuk percaya bahwa a adalah seseorang

323
00:14:34,520 --> 00:14:36,430
yang mengirimkan pesan ini.

324
00:14:36,430 --> 00:14:37,470
Masuk akal?

325
00:14:37,470 --> 00:14:40,050
Hal lain yang dapat Anda 
lakukan adalah mengandalkan enkripsi.

326
00:14:40,050 --> 00:14:44,120
Jadi mungkin b dapat mengirimkan
nonce kembali ke a sudah terenkripsi

327
00:14:44,120 --> 00:14:46,029
dengan kunci publik dari a.

328
00:14:46,029 --> 00:14:48,070
Lalu hanya a yang akan dapat
mendekripsi nonce tersebut

329
00:14:48,070 --> 00:14:50,366
dan membangkitkan
kunci sesi final s aksen.

330
00:14:50,366 --> 00:14:52,240
Jadi ada beberapa
trik yang anda dapat lakukan.

331
00:14:52,240 --> 00:14:55,110
Ini secara kasar adalah bagaimana
klien mensertifikasi

332
00:14:55,110 --> 00:14:57,640
pekerjaan di peramban web saat ini.

333
00:14:57,640 --> 00:15:00,005
Jadi a memiliki sebuah kunci
rahasia, sehingga ketika mendapatkan

334
00:15:00,005 --> 00:15:03,550
sebuah sertifikat pribadi MIT,
yang terjadi adalah peramban Anda

335
00:15:03,550 --> 00:15:05,300
membangun sebuah
kunci rahasia yang berumur panjang

336
00:15:05,300 --> 00:15:07,410
dan mendapatkan sertifikat untuk itu.

337
00:15:07,410 --> 00:15:10,636
Dan kapanpun Anda mengirimkan
permintaan ke sebuah server web,

338
00:15:10,636 --> 00:15:12,260
Anda akan membuktikan
fakta bahwa Anda

339
00:15:12,260 --> 00:15:15,970
mengetahui kunci rahasia dalam 
sertifikat pengguna Anda,

340
00:15:15,970 --> 00:15:18,540
dan kemudian membangun 
kunci rahasia s untuk

341
00:15:18,540 --> 00:15:19,972
komunikasi berikutnya.

342
00:15:19,972 --> 00:15:22,640
Masuk akal?

343
00:15:22,640 --> 00:15:23,180
Baiklah.

344
00:15:26,820 --> 00:15:29,760
Ini adalah semacam masalah yang dapat diperbaiki 
pada tingkatan protokol

345
00:15:29,760 --> 00:15:31,820
yang cukup mudah
untuk (V) diatasi

346
00:15:31,820 --> 00:15:33,390
dengan menambahkan pesan tambahan.

347
00:15:33,390 --> 00:15:36,810
Asumsi besar di sini, 
tentu saja,

348
00:15:36,810 --> 00:15:41,090
adalah agar semua pihak tahu
kunci publik milik satu dengan yang lainnya.

349
00:15:41,090 --> 00:15:47,500
Jadi apakah Anda benar-benar menemukan
kunci publik seseorang?

350
00:15:47,500 --> 00:15:50,910
untuk, Anda tahu, ingin
terhubung ke sebuah situs web,

351
00:15:50,910 --> 00:15:53,882
saya memiliki sebuah URL yang ingin saya
hubungkan, atau sebuah nama host,

352
00:15:53,882 --> 00:15:55,840
bagaimana cara saya mengetahui 
kunci publik yang sesuai?

353
00:15:55,840 --> 00:15:59,660
Atau sama halnya, jika saya mencoba terhubung dengan
websis untuk melihat nilai saya,

354
00:15:59,660 --> 00:16:04,070
bagaimana server mengetahui
apa kunci publik saya yang seharusnya,

355
00:16:04,070 --> 00:16:08,550
dibandingkan dengan kunci publik
milik seorang individu lain di MIT?

356
00:16:08,550 --> 00:16:13,889
Jadi hal ini merupakan masalah utama
yang diselesaikan oleh KDC.

357
00:16:13,889 --> 00:16:16,180
Saya rasa KDC telah menyelesaikan
dua masalah yang kita miliki sebelumnya.

358
00:16:16,180 --> 00:16:19,081
Salah satunya adalah
membangkitkan pesan ini.

359
00:16:19,081 --> 00:16:20,455
KDC membangkitkan
kunci sesi

360
00:16:20,455 --> 00:16:22,490
dan mengenkripsi kunci tersebut
untuk server.

361
00:16:22,490 --> 00:16:25,480
Kita memperbaikinya dengan melakukan
kriptografi kunci publik.

362
00:16:25,480 --> 00:16:29,350
Tetapi kita juga membutuhkan
pemetaan ini dari string prinsipiel

363
00:16:29,350 --> 00:16:32,340
utama ke kunci kriptografi
dari Kerberos sebelumnya

364
00:16:32,340 --> 00:16:33,512
yang diberikan kepada kita.

365
00:16:33,512 --> 00:16:34,970
Dan bagaimana cara itu
akan terjadi

366
00:16:34,970 --> 00:16:42,200
di dunia https ini,
protokol ini disebut TLC,

367
00:16:42,200 --> 00:16:45,200
adalah kita akan tetap
mengandalkan beberapa pihak

368
00:16:45,200 --> 00:16:47,740
untuk menjaga, untuk
setidaknya secara logis

369
00:16:47,740 --> 00:16:50,920
menjaga tabel besar itu
memetakan nama-nama prinsipil

370
00:16:50,920 --> 00:16:53,420
ke kunci-kunci kriptografi.

371
00:16:53,420 --> 00:16:56,174
Dan rencananya adalah, kami 
akan memiliki sesuatu

372
00:16:56,174 --> 00:16:57,465
yang disebut sebagai otoritas sertifikat.

373
00:17:02,470 --> 00:17:05,380
Ini sering disingkat sebagai CA
(Certificate Authority) dalam bermacam-macam

374
00:17:05,380 --> 00:17:07,609
literatur keamanan.

375
00:17:07,609 --> 00:17:10,400
Hal ini juga akan
secara logis menjaga

376
00:17:10,400 --> 00:17:13,380
kestabilan dari, berikut
nama dari sebuah prinsipiel,

377
00:17:13,380 --> 00:17:19,319
dan inilah kunci
publik dari prinsipiel tersebut.

378
00:17:19,319 --> 00:17:22,300
Dan perbedaan utama dari
cara Kerberos bekerja,

379
00:17:22,300 --> 00:17:24,280
adalah bahwa
sertifikat otoritas ini

380
00:17:24,280 --> 00:17:28,450
tidak harus
daring untuk semua transaksi.

381
00:17:28,450 --> 00:17:30,450
Jadi di Kerberos Anda harus
berkomunikasi dengan para KDC tersebut

382
00:17:30,450 --> 00:17:33,800
untuk mendapatkan koneksi atau
untuk mencari kunci milik seseorang.

383
00:17:33,800 --> 00:17:36,790
Alih-alih, apa yang akan
terjadi di dunia CA ini, 

384
00:17:36,790 --> 00:17:43,210
yaitu jika Anda memiliki sebuah
nama disini dan sebuah kunci publik,

385
00:17:43,210 --> 00:17:44,800
otoritas sertifikat
itu hanya akan

386
00:17:44,800 --> 00:17:51,020
menandai pesan-pesan menyatakan
bahwa baris-baris tertentu ada

387
00:17:51,020 --> 00:17:52,940
di dalam tabel ini.

388
00:17:52,940 --> 00:17:54,540
Jadi otoritas
sertifikat itu akan

389
00:17:54,540 --> 00:17:59,540
memiliki semacam kunci rahasia
dan kunci publik sendiri di sini.

390
00:18:01,700 --> 00:18:03,520
Dan dia akan
menggunakan kunci rahasia

391
00:18:03,520 --> 00:18:09,080
untuk menemukan pesan-pesan untuk
pengguna lain dalam sistem tersebut untuk diandalkan.

392
00:18:09,080 --> 00:18:11,870
Jadi jika Anda memiliki sebuah
entri tertentu seperti ini,

393
00:18:11,870 --> 00:18:15,410
dalam basis data milik CA (otoritas
sertifikat) ini, maka CA tersebut

394
00:18:15,410 --> 00:18:19,510
akan menemukan sebuah
pesan yang menyebutkan nama ini

395
00:18:19,510 --> 00:18:22,750
yang berkaitan dengan kunci publik ini.

396
00:18:22,750 --> 00:18:26,040
Dan dia akan menandai
seluruh pesan ini

397
00:18:26,040 --> 00:18:31,225
dengan kunci rahasia CA.

398
00:18:31,225 --> 00:18:31,725
Masuk akal?

399
00:18:34,430 --> 00:18:37,790
Jadi ini akan memungkinkan kita 
melakukan hal yang sangat mirip dengan apa

400
00:18:37,790 --> 00:18:40,020
yang Kerberos lakukan,
tapi kita sekarang

401
00:18:40,020 --> 00:18:42,830
akan menyingkirkan 
fakta bahwa CA harus

402
00:18:42,830 --> 00:18:45,192
daring untuk semua transaksi.

403
00:18:45,192 --> 00:18:47,400
Dan faktanya, sekarang akan 
jauh lebih skalabel.

404
00:18:47,400 --> 00:18:49,358
Jadi inilah yang biasanya
disebut sebagai sebuah sertifikat.

405
00:18:51,690 --> 00:18:54,080
Dan alasan mengapa ini akan 
jauh lebih skalabel

406
00:18:54,080 --> 00:19:00,027
adalah, untuk klien, 
atau siapa pun yang menggunakan sistem ini,

407
00:19:00,027 --> 00:19:01,610
sebuah sertifikat yang diberikan 
dari satu sumber

408
00:19:01,610 --> 00:19:04,240
sama bagusnya dengan sertifikat
yang diberikan oleh sumber lain.

409
00:19:04,240 --> 00:19:06,120
Sertifikat itu telah ditandatangani
dengan kunci rahasia CA.

410
00:19:06,120 --> 00:19:08,700
Jadi Anda dapat memeriksa
keabsahannya tanpa harus

411
00:19:08,700 --> 00:19:10,830
menghubungi
otoritas sertifikat,

412
00:19:10,830 --> 00:19:13,867
atau pihak berwenang
lain di sini.

413
00:19:13,867 --> 00:19:15,950
Dan biasanya, cara kerja
dari proses ini adalah server

414
00:19:15,950 --> 00:19:19,880
yang Anda ingin hubungi
menyimpan sertifikat yang

415
00:19:19,880 --> 00:19:21,980
sebelumnya didapatkan
dari otoritas sertifikat.

416
00:19:21,980 --> 00:19:24,339
Dan kapanpun Anda ingin terhubung
dengan server, server

417
00:19:24,339 --> 00:19:26,130
akan memberi tahu Anda, baik,
ini sertifikat saya.

418
00:19:26,130 --> 00:19:27,350
Itu telah ditandatangani oleh CA ini.

419
00:19:27,350 --> 00:19:29,520
Anda dapat memeriksa
tanda tangan dan cukup memverifikasi

420
00:19:29,520 --> 00:19:33,020
bahwa ini sebenarnya adalah
kunci publik saya dan itu adalah nama saya.

421
00:19:33,020 --> 00:19:34,700
Dan pada sisi
sebaliknya, hal yang sama

422
00:19:34,700 --> 00:19:36,060
terjadi pada sertifikat klien.

423
00:19:36,060 --> 00:19:39,790
Jadi saat Anda sebagai pengguna terhubung
pada server web, yang sebenarnya 

424
00:19:39,790 --> 00:19:42,590
terjadi adalah 
sertifikat klien Anda sebenarnya

425
00:19:42,590 --> 00:19:45,780
berkomunikasi tentang kunci publik
yang sesuai dengan kunci rahasia

426
00:19:45,780 --> 00:19:48,221
yang awalnya Anda
bangkitkan pada peramban Anda.

427
00:19:48,221 --> 00:19:49,970
Dan dengan cara ini saat Anda
terhubung ke server,

428
00:19:49,970 --> 00:19:52,350
Anda akan mempresentasikan
sebuah sertifikat ditandatangani

429
00:19:52,350 --> 00:19:55,780
oleh otoritas sertifikasi MIT
yang menyatakan bahwa nama pengguna Anda

430
00:19:55,780 --> 00:19:57,680
sesuai dengan dengan kunci publik ini.

431
00:19:57,680 --> 00:20:00,430
Dan inilah bagaimana cara server
dapat diyakinkan

432
00:20:00,430 --> 00:20:03,430
bahwa sebuah pesan yang ditandatangani
menggunakan kunci rahasia milik Anda

433
00:20:03,430 --> 00:20:09,695
merupakan bukti bahwa ini pengguna Athena
yang tepat yang terhubung dengan saya.

434
00:20:09,695 --> 00:20:10,570
Apakah itu masuk akal?

435
00:20:10,570 --> 00:20:11,206
Yah.

436
00:20:11,206 --> 00:20:12,956
AUDIENS: Dari mana 
[? proyek ?] mendapatkan

437
00:20:12,956 --> 00:20:15,470
sertifikat [TIDAK TERDENGAR]

438
00:20:15,470 --> 00:20:16,819
PROFESSOR: Ah, betul.

439
00:20:16,819 --> 00:20:18,360
Seperti masalah ayam
dan telur.

440
00:20:18,360 --> 00:20:19,330
Itu terus berlanjut.

441
00:20:19,330 --> 00:20:20,788
Dari mana Anda mendapatkan
kunci-kunci publik ini?

442
00:20:20,788 --> 00:20:22,840
Di satu titik Anda
harus menuliskan ini ke kodenya,

443
00:20:22,840 --> 00:20:25,310
atau itulah yang biasanya
dilakukan kebanyakan sistem.

444
00:20:25,310 --> 00:20:27,074
Jadi hari ini apa
yang sebenarnya terjadi adalah

445
00:20:27,074 --> 00:20:28,615
ketika Anda mengunduh
sebuah peramban web,

446
00:20:28,615 --> 00:20:30,950
atau Anda mendapatkan sebuah komputer
untuk pertama kali,

447
00:20:30,950 --> 00:20:33,930
komputer tersebut sebenarnya datang dengan
kunci publik dari ratusan

448
00:20:33,930 --> 00:20:35,730
dari otoritas
sertifikat ini.

449
00:20:35,730 --> 00:20:37,440
Dan mereka ada banyak.

450
00:20:37,440 --> 00:20:41,660
Beberapa dijalankan oleh
perusahaan sekuritas seperti Verisign.

451
00:20:41,660 --> 00:20:43,880
Layanan Pos Amerika Serikat mempunyai
sebuah sertifikat otoritas,

452
00:20:43,880 --> 00:20:44,860
untuk alasan tertentu.

453
00:20:44,860 --> 00:20:47,640
Ada banyak entitas di sana
yang dapat, pada prinsipnya, menerbitkan

454
00:20:47,640 --> 00:20:50,770
sertifikat ini dan
dipercaya sepenuhnya oleh sistem.

455
00:20:53,510 --> 00:20:55,740
Otoritas sertifikat
mini ini

456
00:20:55,740 --> 00:20:59,674
sekarang menggantikan kepercayaan
yang kita miliki pada KDC ini.

457
00:20:59,674 --> 00:21:01,090
Dan terkadang, kita
belum benar-benar

458
00:21:01,090 --> 00:21:03,910
mengatasi semua masalah yang
kita lihat dengan Kerberos.

459
00:21:03,910 --> 00:21:06,930
Jadi sebelumnya kita khawatir
bahwa, ya ampun, bagaimana

460
00:21:06,930 --> 00:21:08,180
kita akan percaya?

461
00:21:08,180 --> 00:21:09,570
Bagaimana semua orang
di dunia bisa

462
00:21:09,570 --> 00:21:11,820
mempercayai satu mesin KDC?

463
00:21:11,820 --> 00:21:13,850
Tapi sekarang, sebenarnya lebih buruk.

464
00:21:13,850 --> 00:21:16,400
Ini sebenarnya lebih buruk
dalam beberapa hal, karena alih-alih

465
00:21:16,400 --> 00:21:18,320
mempercayai sebuah
mesin KDC tunggal

466
00:21:18,320 --> 00:21:20,960
sekarang semua orang akan mempercayai
ratusan otoritas

467
00:21:20,960 --> 00:21:23,380
sertifikat ini karena mereka
semua sama kuatnya.

468
00:21:23,380 --> 00:21:25,390
Siapa pun dari mereka dapat menandai
sebuah pesan seperti ini

469
00:21:25,390 --> 00:21:28,720
dan akan
diterima oleh klien

470
00:21:28,720 --> 00:21:31,650
sebagai sebuah pernyataan yang benar
menyatakan bahwa prinsipiel ini

471
00:21:31,650 --> 00:21:33,530
memiliki kunci publik ini.

472
00:21:33,530 --> 00:21:35,890
Jadi Anda hanya perlu membobol
salah satu dari mereka ini, alih-alih

473
00:21:35,890 --> 00:21:37,830
satu KDSC.

474
00:21:40,500 --> 00:21:41,235
Ya?

475
00:21:41,235 --> 00:21:43,304
AUDIENS: Apakah ada sebuah
mekanisme untuk membuka kunci tersebut?

476
00:21:43,304 --> 00:21:43,970
PROFESSOR: Ya.

477
00:21:43,970 --> 00:21:45,550
Itu masalah sulit lainnya.

478
00:21:45,550 --> 00:21:47,889
Ternyata sebelum kita
berbicara dengan KDC,

479
00:21:47,889 --> 00:21:49,430
dan jika Anda mengacau,
Anda bisa memberitahu

480
00:21:49,430 --> 00:21:52,500
KDC untuk berhenti memberikan
kunci saya, atau mengubahnya.

481
00:21:52,500 --> 00:21:55,410
Sekarang sertifikat tersebut 
sebenarnya berpotensi berlaku

482
00:21:55,410 --> 00:21:56,110
selamanya.

483
00:21:56,110 --> 00:21:58,400
Jadi solusi tipikal
ada dua.

484
00:21:58,400 --> 00:22:01,410
Salah satunya adalah, seperti 
yang diduga, sertifikat ini

485
00:22:01,410 --> 00:22:05,054
menyertakan waktu kedaluwarsa.

486
00:22:05,054 --> 00:22:06,970
Jadi dengan cara ini Anda setidaknya 
bisa membatasi kerusakannya.

487
00:22:06,970 --> 00:22:09,178
Apakah ini seperti 
masa pakai tiket Kerberos,

488
00:22:09,178 --> 00:22:11,917
kecuali dalam praktiknya, ini
cenderung beberapa kali lipat

489
00:22:11,917 --> 00:22:12,750
lebih tinggi.

490
00:22:12,750 --> 00:22:14,740
Jadi di dalam Kerberos,
masa aktif tiket Anda

491
00:22:14,740 --> 00:22:16,720
dapat mencapai beberapa jam.

492
00:22:16,720 --> 00:22:20,720
Di sini biasanya satu tahun
atau kurang lebih seperti ini.

493
00:22:20,720 --> 00:22:24,470
Jadi CA benar-benar tidak mau 
terlalu sering diajak berkomunikasi.

494
00:22:24,470 --> 00:22:26,240
Jadi, Anda ingin mendapatkan
uang Anda sekali

495
00:22:26,240 --> 00:22:27,750
dalam setahun untuk 
sertifikat, dan kemudian

496
00:22:27,750 --> 00:22:29,795
mengembalikan beberapa
kumpulan byte bertanda tangan,

497
00:22:29,795 --> 00:22:31,170
dan Anda akan baik-baik
saja selama satu tahun.

498
00:22:31,170 --> 00:22:32,930
Anda tidak perlu
menghubungi mereka kembali.

499
00:22:32,930 --> 00:22:35,690
Jadi ini bagus untuk segi skalabilitas,
tapi tidak terlalu bagus untuk segi keamanan.

500
00:22:35,690 --> 00:22:39,620
Dan ada dua masalah
yang Anda mungkin akan khawatirkan

501
00:22:39,620 --> 00:22:40,860
terkait sertifikat.

502
00:22:40,860 --> 00:22:44,030
Pertama adalah bahwa mungkin
CA tersebut mengacau.

503
00:22:44,030 --> 00:22:47,710
Sehingga mungkin CA tersebut menerbitkan sebuah
sertifikat untuk nama yang salah.

504
00:22:47,710 --> 00:22:49,190
Seperti, mereka tidak sangat berhati-hati.

505
00:22:49,190 --> 00:22:50,856
Dan secara tidak sengaja, saya
meminta mereka untuk memberi Anda

506
00:22:50,856 --> 00:22:53,297
sebuah sertifikat untuk amazon.com,
dan mereka ceroboh

507
00:22:53,297 --> 00:22:54,380
dan mengatakan, baiklah, tentu saja.

508
00:22:54,380 --> 00:22:54,975
Itu adalah amazon.com.

509
00:22:54,975 --> 00:22:56,599
Saya akan memberikan Anda sebuah
sertifikat untuk itu.

510
00:22:56,599 --> 00:22:58,860
Jadi itu terlihat seperti sebuah
masalah pada sisi CA.

511
00:22:58,860 --> 00:23:00,412
Jadi mereka salah menerbitkan
sebuah sertifikat.

512
00:23:00,412 --> 00:23:02,870
Dan itu salah satu cara Anda
bisa mendapatkan sertifikat

513
00:23:02,870 --> 00:23:05,550
yang Anda inginkan tidak ada
lagi, karena Anda

514
00:23:05,550 --> 00:23:07,180
menandatangani hal yang salah.

515
00:23:07,180 --> 00:23:09,375
Kemungkinan lain
adalah bahwa CA

516
00:23:09,375 --> 00:23:11,440
melakukan hal yang benar,
tetapi kemudian orang yang

517
00:23:11,440 --> 00:23:14,110
memiliki sertifikat saya
secara tidak sengaja mengungkapkan

518
00:23:14,110 --> 00:23:17,220
kunci rahasia, atau seseorang mencuri
kunci rahasia yang sesuai

519
00:23:17,220 --> 00:23:19,130
dengan kunci publik
dalam sertifikat.

520
00:23:19,130 --> 00:23:21,780
Jadi ini berarti bahwa
sertifikat tidak lagi mengatakan

521
00:23:21,780 --> 00:23:23,380
seperti apa yang Anda pikirkan.

522
00:23:23,380 --> 00:23:27,730
Meskipun ini mengatakan
kunci amazon.com adalah ini,

523
00:23:27,730 --> 00:23:29,285
pada hakekatnya semua orang
di dunia memiliki

524
00:23:29,285 --> 00:23:31,201
kunci rahasia yang berkaitan
karena mereka menaruhnya

525
00:23:31,201 --> 00:23:31,910
di internet.

526
00:23:31,910 --> 00:23:34,425
Jadi Anda tidak dapat mempelajari
banyak hal dari seseorang

527
00:23:34,425 --> 00:23:36,966
yang mengirim Anda sebuah pesan yang ditandatangani oleh
kunci rahasi yang berkaitan,

528
00:23:36,966 --> 00:23:40,187
karena bisa siapa saja
yang telah mencuri kunci rahasia itu.

529
00:23:40,187 --> 00:23:41,770
Jadi hal itu alasan
lain mengapa Anda mungkin

530
00:23:41,770 --> 00:23:44,250
ingin menghapus sebuah sertifikat.

531
00:23:44,250 --> 00:23:47,220
Dan menghapus sertifikat
merupakan suatu hal yang rumit.

532
00:23:47,220 --> 00:23:51,100
Tidak ada
cara paling bagus untuk hal tersebut.

533
00:23:51,100 --> 00:23:56,340
Dua cara
yang telah dicoba oleh orang-orang

534
00:23:56,340 --> 00:24:00,690
pada dasarnya mempublikasikan
daftar semua

535
00:24:00,690 --> 00:24:01,800
sertifikat yang dicabut di dunia.

536
00:24:01,800 --> 00:24:04,630
Ini adalah sesuatu yang disebut 
daftar pencabutan

537
00:24:04,630 --> 00:24:06,550
sertifikat (Certificate Revocation List), atau CRLs.

538
00:24:06,550 --> 00:24:09,800
Dan cara kerjanya 
adalah setiap otoritas

539
00:24:09,800 --> 00:24:11,830
sertifikat mengeluarkan
sertifikat ini,

540
00:24:11,830 --> 00:24:15,040
tetapi di samping itu
ia menyimpan daftar kesalahan.

541
00:24:15,040 --> 00:24:16,460
Ini adalah hal-hal
yang disadari

542
00:24:16,460 --> 00:24:18,126
bahwa mereka mengacau dan
mengeluarkan sertifikat

543
00:24:18,126 --> 00:24:20,320
dengan nama yang salah, atau
pelanggan kami mendatangi mereka

544
00:24:20,320 --> 00:24:22,070
dan berkata, hei, Anda 
memberi saya sertifikat.

545
00:24:22,070 --> 00:24:23,380
Semuanya berjalan dengan baik.

546
00:24:23,380 --> 00:24:25,020
Tapi kemudian seseorang
merusak mesin saya

547
00:24:25,020 --> 00:24:26,370
dan mencuri kunci privat.

548
00:24:26,370 --> 00:24:29,570
Tolong beritahu kepada seluruh dunia bahwa
sertifikat saya sudah tidak bagus lagi.

549
00:24:29,570 --> 00:24:31,570
Jadi otoritas sertifikat
ini, pada dasarnya,

550
00:24:31,570 --> 00:24:36,260
dapat menambahkan sesuatu ke CRL ini, dan
klien seperti peramban web

551
00:24:36,260 --> 00:24:39,309
seharusnya mengunduh
CRL ini secara periodik.

552
00:24:39,309 --> 00:24:41,600
Lalu setiap kali mereka 
diberikan sebuah sertifikat,

553
00:24:41,600 --> 00:24:43,100
mereka harus memeriksa
jika sertifikat tersebut

554
00:24:43,100 --> 00:24:45,689
muncul dalam daftar sertifikat yang dicabut ini.

555
00:24:45,689 --> 00:24:47,105
Dan itu muncul
disana, lalu seharusnya

556
00:24:47,105 --> 00:24:49,850
mengatakan bahwa sertifikat itu tidak bagus.

557
00:24:49,850 --> 00:24:51,384
Anda sebaiknya memberi saya yang baru.

558
00:24:51,384 --> 00:24:53,200
Saya tidak akan percaya
tanda pesan khusus

559
00:24:53,200 --> 00:24:54,990
ini lagi.

560
00:24:54,990 --> 00:24:56,770
Jadi itu adalah satu rencana.

561
00:24:56,770 --> 00:24:57,620
Itu tidak bagus.

562
00:25:00,600 --> 00:25:02,754
Jika Anda benar-benar menggunakannya, itu
akan menjadi sebuah daftar yang sangat besar.

563
00:25:02,754 --> 00:25:04,920
Dan itu akan menjadi biaya di awal
yang banyak untuk semua orang

564
00:25:04,920 --> 00:25:06,772
di dunia untuk mengunduh ini.

565
00:25:06,772 --> 00:25:08,480
Masalah lainnya adalah
bahwa tidak ada siapapun yang sebenarnya

566
00:25:08,480 --> 00:25:11,370
mau untuk melakukan hal ini. Jadi
daftar tersebut pada praktisnya kosong.

567
00:25:11,370 --> 00:25:13,600
Jika anda benar-benar bertanya seluruh
CA-CA ini, kebanyakan dari mereka

568
00:25:13,600 --> 00:25:16,210
akan memberikan anda kembali sebuah CRL kosong
karena tidak ada orang yang pernah bersusah payah

569
00:25:16,210 --> 00:25:17,418
untuk menambahkan apapun ke daftar ini.

570
00:25:17,418 --> 00:25:18,610
Karena, mengapa Anda harus melakukannya?

571
00:25:18,610 --> 00:25:20,330
Ini hanya akan merusak
berbagai hal karena ini

572
00:25:20,330 --> 00:25:23,210
akan mengurangi jumlah 
koneksi yang akan berhasil.

573
00:25:23,210 --> 00:25:26,210
Jadi tidak jelas apakah ada
motivasi yang besar bagi CA

574
00:25:26,210 --> 00:25:29,530
untuk mengelola CRL ini.

575
00:25:29,530 --> 00:25:31,460
Hal lain yang
telah dicoba orang

576
00:25:31,460 --> 00:25:34,190
adalah menanyakan CA secara online.

577
00:25:34,190 --> 00:25:39,200
Seperti di dunia Kerberos, kita
menghubungi KDC setiap saat.

578
00:25:39,200 --> 00:25:41,590
Dan di dunia CA kita mencoba
keluar dari bisnis ini

579
00:25:41,590 --> 00:25:43,090
dan berkata, baik,
CA hanya akan

580
00:25:43,090 --> 00:25:45,280
menandatangani
pesan-pesan ini setahun sekali.

581
00:25:45,280 --> 00:25:46,280
Itu agak mengecewakan.

582
00:25:46,280 --> 00:25:47,750
Jadi ada sebuah
protokol alternatif

583
00:25:47,750 --> 00:25:52,970
yang disebut protokol status sertifikat online
(Online Certificate Status Protocol, OCSP).

584
00:25:52,970 --> 00:25:57,050
Dan protokol ini mendorong
kita keluar dari dunia CA

585
00:25:57,050 --> 00:25:58,110
ke dunia KDC.

586
00:25:58,110 --> 00:26:00,840
Jadi kapanpun seorang klien
mendapat sebuah sertifikat

587
00:26:00,840 --> 00:26:03,300
dan mereka penasaran, apakah ini 
benar-benar sertifikat yang valid?

588
00:26:03,300 --> 00:26:05,160
Meskipun itu masih sebelum
waktu kadaluwarsa,

589
00:26:05,160 --> 00:26:06,660
mungkin terjadi suatu kesalahan.

590
00:26:06,660 --> 00:26:10,670
Jadi menggunakan protokol OCSP ini,
Anda dapat menghubungi satu server

591
00:26:10,670 --> 00:26:12,760
dan katakan, hi, saya
mendapat sertifikat ini.

592
00:26:12,760 --> 00:26:14,330
Menurut Anda apakah sertitifikat ini masih valid?

593
00:26:14,330 --> 00:26:18,220
Jadi pada dasarnya, mengurangi
pekerjaan menyimpan CRL ini

594
00:26:18,220 --> 00:26:19,520
ke server tertentu.

595
00:26:19,520 --> 00:26:21,710
Jadi dibandingkan mengunduh
sendiri seluruh daftar,

596
00:26:21,710 --> 00:26:23,334
Anda akan bertanya
kepada server, hei, apakah

597
00:26:23,334 --> 00:26:24,950
hal ini ada dalam daftar itu?

598
00:26:24,950 --> 00:26:27,710
Jadi itulah rencana lain
yang telah dicoba orang.

599
00:26:27,710 --> 00:26:33,710
Ini juga tidak digunakan secara
luas karena dua faktor.

600
00:26:33,710 --> 00:26:38,990
Salah satunya adalah menambahkan latensi ke 
setiap permintaan yang Anda buat.

601
00:26:38,990 --> 00:26:41,450
Jadi setiap kali Anda ingin
terhubung ke server,

602
00:26:41,450 --> 00:26:44,060
sekarang Anda harus terhubung 
terlebih dahulu, dapatkan sertifikat

603
00:26:44,060 --> 00:26:45,370
dari server.

604
00:26:45,370 --> 00:26:46,950
Sekarang Anda harus berbicara
dengan OCSP ini

605
00:26:46,950 --> 00:26:50,950
dan kemudian menunggu dia menjawab
dan kemudian melakukan sesuatu yang lain.

606
00:26:50,950 --> 00:26:52,980
Jadi untuk alasan latensi,
ini sebenarnya

607
00:26:52,980 --> 00:26:54,970
bukan sebuah rencana yang sangat populer.

608
00:26:54,970 --> 00:26:56,980
Masalah lainnya
adalah bahwa Anda tidak

609
00:26:56,980 --> 00:27:01,800
ingin OCSP ini mati
kemudian mempengaruhi kemampuan

610
00:27:01,800 --> 00:27:02,880
untuk menjelajahi web.

611
00:27:02,880 --> 00:27:04,369
Misalkan OCSP server
ini mati.

612
00:27:04,369 --> 00:27:06,160
Anda dapat, sebagai contoh, menonaktifkan
seluruh internet

613
00:27:06,160 --> 00:27:08,090
karena Anda tidak dapat memeriksa
sertifikat siapapun.

614
00:27:08,090 --> 00:27:09,600
Bisa jadi semuanya buruk.

615
00:27:09,600 --> 00:27:12,230
Dan kemudian seluruh
koneksi Anda berhenti bekerja.

616
00:27:12,230 --> 00:27:13,590
Tidak ada yang menginginkan hal tersebut.

617
00:27:13,590 --> 00:27:17,030
Jadi, kebanyakan klien
memperlakukan server OCSP 

618
00:27:17,030 --> 00:27:21,194
yang sedang mati
sebagai kejadian yang baik-baik saja.

619
00:27:21,194 --> 00:27:23,110
Hal ini sangat buruk dari
perspektif keamanan

620
00:27:23,110 --> 00:27:24,790
karena jika Anda
seorang penyerang dan Anda

621
00:27:24,790 --> 00:27:27,040
ingin meyakinkan seseorang
bahwa Anda memiliki

622
00:27:27,040 --> 00:27:30,000
sertifikat yang sah, tapi
sebenarnya sudah dicabut,

623
00:27:30,000 --> 00:27:32,740
yang Anda harus lakukan
adalah untuk mencegah

624
00:27:32,740 --> 00:27:36,090
klien tersebut berkomunikasi
dengan server OCSP.

625
00:27:36,090 --> 00:27:39,080
Kemudian klien tersebut akan berkata,
oke, saya memproses sertifikatnya.

626
00:27:39,080 --> 00:27:40,510
Saya sudah mencoba untuk memeriksanya,
tapi server OCSP ini

627
00:27:40,510 --> 00:27:42,770
tidak dapat dihubungi,
jadi saya akan menganggap semuanya baik-baik saja.

628
00:27:42,770 --> 00:27:46,554
Jadi pada dasarnya
itulah yang terjadi

629
00:27:46,554 --> 00:27:47,720
saat verifikasi berlangsung.

630
00:27:47,720 --> 00:27:50,150
Jadi tidak ada jawaban yang benar-benar tepat.

631
00:27:50,150 --> 00:27:52,210
Hal yang dilakukan
oleh orang-orang pada praktiknya

632
00:27:52,210 --> 00:27:54,710
sebagai alternatif untuk hal ini
adalah klien yang menulis di kode nya

633
00:27:54,710 --> 00:27:58,500
langsung merupakan sebuah kesalahan besar.

634
00:27:58,500 --> 00:28:01,220
Sebagai contoh, peramban web
Chrome sebenarnya

635
00:28:01,220 --> 00:28:04,080
mengandung
daftar sertifikat

636
00:28:04,080 --> 00:28:06,400
yang benar-benar ingin
Google cabut.

637
00:28:06,400 --> 00:28:08,570
Jadi jika seseorang
salah menerbitkan sertifikat

638
00:28:08,570 --> 00:28:11,790
untuk Gmail atau untuk beberapa
situs web penting seperti Facebook,

639
00:28:11,790 --> 00:28:15,780
Amazon, atau apapun lalu
versi rilis Chrome berikutnya

640
00:28:15,780 --> 00:28:19,950
akan berisi hal itu
di daftar verifikasinya dan

641
00:28:19,950 --> 00:28:21,300
ditambahkan ke dalam Chrome.

642
00:28:21,300 --> 00:28:23,884
Jadi dengan cara ini, Anda tidak 
perlu menghubungi server CRL.

643
00:28:23,884 --> 00:28:25,550
Anda tidak harus
berbicara dengan si OCSP ini.

644
00:28:25,550 --> 00:28:26,160
Karena itu sudah ada di dalamnya.

645
00:28:26,160 --> 00:28:27,910
Seperti, sertifikat ini
sudah tidak berlaku.

646
00:28:27,910 --> 00:28:29,016
Klien menolaknya.

647
00:28:29,016 --> 00:28:29,988
Ya.

648
00:28:29,988 --> 00:28:30,474
AUDIENS: Maaf, satu hal terakhir.

649
00:28:30,474 --> 00:28:30,960
PROFESSOR: Iya.

650
00:28:30,960 --> 00:28:32,418
AUDIENS: Jadi katakanlah
saya telah mencuri kunci rahasia

651
00:28:32,418 --> 00:28:33,876
dari sertifikat [TIDAK TERDENGAR].

652
00:28:33,876 --> 00:28:35,140
Semua kunci publik
[? ditulis langsung di kode-- ?]

653
00:28:35,140 --> 00:28:35,973
PROFESSOR: Oh, iya.

654
00:28:35,973 --> 00:28:38,730
Itu [TIDAK TERDENGAR] sangat buruk.

655
00:28:38,730 --> 00:28:42,280
Saya tidak berpikir ada
solusi yang dimasukkan ke dalam sistem

656
00:28:42,280 --> 00:28:45,690
saat ini untuk hal itu.

657
00:28:45,690 --> 00:28:47,290
Ada beberapa 
situasi tertentu

658
00:28:47,290 --> 00:28:49,810
di mana otoritas
sertifikat tampaknya

659
00:28:49,810 --> 00:28:51,400
telah disusupi.

660
00:28:51,400 --> 00:28:54,870
Jadi pada 2011, terdapat
dua CA yang  

661
00:28:54,870 --> 00:28:58,200
telah disusupi di kasus ini,
atau mereka entah bagaimana

662
00:28:58,200 --> 00:29:00,090
ditipu untuk menerbitkan
sertifikat untuk Gmail,

663
00:29:00,090 --> 00:29:01,790
untuk Facebook, dan lain-lain.

664
00:29:01,790 --> 00:29:03,290
Dan hal ini tidak jelas.

665
00:29:03,290 --> 00:29:05,010
Mungkin ada yang
mencuri kunci rahasia mereka.

666
00:29:05,010 --> 00:29:09,150
Jadi yang terjadi adalah saya
pikir CA tersebut sebenarnya

667
00:29:09,150 --> 00:29:12,010
telah dihapus dari
kumpulan CA yang terpercaya

668
00:29:12,010 --> 00:29:13,469
oleh peramban dari titik itu.

669
00:29:13,469 --> 00:29:15,760
Jadi pada rilis Chrome yang berikutnya
dia seperti, hey, Anda sudah

670
00:29:15,760 --> 00:29:16,390
benar-benar mengacau.

671
00:29:16,390 --> 00:29:18,515
Kami akan mengeluarkan
Anda dari kumpulan CA

672
00:29:18,515 --> 00:29:19,195
yang terpercaya

673
00:29:19,195 --> 00:29:20,420
Dan itu sebenarnya
agak mengecewakan

674
00:29:20,420 --> 00:29:21,875
karena dari semua
orang yang memiliki

675
00:29:21,875 --> 00:29:23,875
sertifikat yang sah
dari otoritas sertifikat itu

676
00:29:23,875 --> 00:29:25,030
sekarang mengalami musibah.

677
00:29:25,030 --> 00:29:26,680
Mereka harus mendapatkan
sertifikat baru.

678
00:29:26,680 --> 00:29:28,440
Jadi ini adalah semacam
sistem yang berantakan,

679
00:29:28,440 --> 00:29:33,190
tapi itulah kira-kira yang terjadi
dalam praktik sertifikasi.

680
00:29:33,190 --> 00:29:34,540
Masuk akal?

681
00:29:34,540 --> 00:29:38,330
Pertanyaan lain
mengenai cara kerjanya?

682
00:29:38,330 --> 00:29:39,612
Baiklah.

683
00:29:39,612 --> 00:29:43,530
Jadi beginilah kira-kira rencana
umum tentang cara kerja sertifikat.

684
00:29:43,530 --> 00:29:46,800
Dan seperti yang kita
bicarakan sebelumnya, mereka

685
00:29:46,800 --> 00:29:48,510
dapat dikatakan lebih baik daripada
Kerberos dalam artian

686
00:29:48,510 --> 00:29:51,610
Anda tidak perlu untuk
menghubungkan orang ini ke jaringan

687
00:29:51,610 --> 00:29:53,580
Itu menjadi sedikit
lebih skalabel

688
00:29:53,580 --> 00:29:55,560
karena Anda bisa
memiliki beberapa KDC,

689
00:29:55,560 --> 00:29:57,200
dan tidak perlu
berkomunikasi dengan mereka.

690
00:29:57,200 --> 00:29:58,783
Hal keren lainnya
tentang protokol ini

691
00:29:58,783 --> 00:30:01,220
adalah bahwa tidak seperti Kerberos,
Anda tidak dipaksa

692
00:30:01,220 --> 00:30:02,980
untuk mengotentikasi kedua belah pihak.

693
00:30:02,980 --> 00:30:06,010
Jadi Anda benar-benar bisa
terhubung ke web server

694
00:30:06,010 --> 00:30:08,157
tanpa harus memiliki
sertifikat untuk diri sendiri.

695
00:30:08,157 --> 00:30:09,240
Ini terjadi sepanjang waktu.

696
00:30:09,240 --> 00:30:10,930
Jika Anda hanya pergi ke
amazon.com, maka Anda

697
00:30:10,930 --> 00:30:13,380
akan memeriksa bahwa
Amazon adalah entitas yang tepat,

698
00:30:13,380 --> 00:30:16,220
tetapi Amazon tidak tahu siapa Anda
sebenarnya, atau setidaknya

699
00:30:16,220 --> 00:30:17,790
tidak sampai Anda log masuk nanti.

700
00:30:17,790 --> 00:30:20,040
Jadi pada tingkat protokol kriptografi,
Anda tidak memiliki sertifikat

701
00:30:20,040 --> 00:30:20,720
Amazon memiliki sebuah sertifikat.

702
00:30:20,720 --> 00:30:22,260
Yang sebenarnya jauh
lebih baik daripada Kerberos

703
00:30:22,260 --> 00:30:24,380
di mana untuk terhubung
ke sebuah layanan Kerberos,

704
00:30:24,380 --> 00:30:28,030
Anda harus memiliki catatan
pada basis data Kerberos.

705
00:30:28,030 --> 00:30:30,690
Satu hal yang sedikit
menyebalkan mengenai protokol ini

706
00:30:30,690 --> 00:30:33,640
seperti yang telah kita lihat
adalah fakta bahwa server

707
00:30:33,640 --> 00:30:35,359
harus memiliki sertifikat.

708
00:30:35,359 --> 00:30:36,900
Jadi Anda tidak bisa hanya
terhubung ke sebuah server

709
00:30:36,900 --> 00:30:39,080
dan mengatakan, hei, mari
enkripsi saja komunikasi kita.

710
00:30:39,080 --> 00:30:41,920
Saya tidak tahu Anda
siapa, atau tidak juga,

711
00:30:41,920 --> 00:30:43,540
dan Anda tidak tahu
siapa saya,

712
00:30:43,540 --> 00:30:44,940
bagaimanapun, mari kita enkripsi.

713
00:30:44,940 --> 00:30:46,870
Jadi hal ini disebut
enkripsi oportunistik,

714
00:30:46,870 --> 00:30:50,020
dan itu tentu saja rentan
terhadap serangan man in the middle

715
00:30:50,020 --> 00:30:52,170
karena Anda sedang terhubung
kepada seseorang dan mengatakan,

716
00:30:52,170 --> 00:30:53,120
baik, mari enkripsikan
komunikasi kita, tetapi Anda

717
00:30:53,120 --> 00:30:55,536
tidak tahu dengan siapa sebenarnya
Anda mengenkripsikan

718
00:30:55,536 --> 00:30:56,290
komunikasi.

719
00:30:56,290 --> 00:30:57,664
Keduanya mungkin adalah
ide yang bagus.

720
00:30:57,664 --> 00:31:00,309
Jika seseorang tidak secara aktif
memasang serangan terhadap Anda,

721
00:31:00,309 --> 00:31:02,850
setidaknya paket-paket itu nantinya
akan terenkripsi dan terlindungi.

722
00:31:02,850 --> 00:31:04,520
dari sadapan.

723
00:31:04,520 --> 00:31:07,590
Jadi sedikit
disayangkan bahwa ini

724
00:31:07,590 --> 00:31:12,220
bukan protokol yang sedang kita
cari disini-- SSL, TLS, atau apapun--

725
00:31:12,220 --> 00:31:15,180
tidak menawarkan kesempatan
enkripsi yang oportunistik seperti ini.

726
00:31:15,180 --> 00:31:16,910
Namun begitulah hidup.

727
00:31:16,910 --> 00:31:19,380
Jadi saya rasa server ini
[TIDAK TERDENGAR] dalam protokol ini.

728
00:31:19,380 --> 00:31:24,100
Klien terkadang dapat dan
terkadang tidak perlu melakukannya.

729
00:31:24,100 --> 00:31:24,600
Masuk akal?

730
00:31:24,600 --> 00:31:24,870
Ya.

731
00:31:24,870 --> 00:31:25,995
AUDIENS: Saya hanya penasaran.

732
00:31:25,995 --> 00:31:27,852
Apa yang dapat menghentikan
seseorang dari-- Maksud saya,

733
00:31:27,852 --> 00:31:30,487
katakanlah bahwa
setahun sekali, mereka

734
00:31:30,487 --> 00:31:32,850
membuat pasangan nama-kunci baru.

735
00:31:32,850 --> 00:31:37,476
Jadi mengapa Anda tidak
menggunakan kunci tersebut

736
00:31:37,476 --> 00:31:39,000
sepanjang tahun?

737
00:31:39,000 --> 00:31:39,809
PROFESOR: Hah?

738
00:31:39,809 --> 00:31:41,600
AUDIENS: Mengapa hal itu
tidak dapat bekerja dengan ini?

739
00:31:41,600 --> 00:31:42,840
PROFESOR: Saya pikir itu bekerja.

740
00:31:42,840 --> 00:31:45,048
OK, jadi seperti apa kira-kira yang
menjadi kesalahan pada skema ini.

741
00:31:45,048 --> 00:31:46,990
Seperti, salah satu
hal yang harus kita

742
00:31:46,990 --> 00:31:49,440
lakukan dengan
topografi yang baik disini,

743
00:31:49,440 --> 00:31:53,230
dan untuk Kerberos, orang-orang
memulainya dengan menggunakan kriptografi yang baik,

744
00:31:53,230 --> 00:31:55,226
tapi hal itu menjadi lebih buruk
dan semakin buruk seiring berjalannya waktu.

745
00:31:55,226 --> 00:31:56,100
Komputer menjadi lebih cepat.

746
00:31:56,100 --> 00:31:58,010
Ada algoritma yang lebih baik
yang bisa memecahkan keamanan ini.

747
00:31:58,010 --> 00:32:00,180
Dan jika orang-orang tidak
rajin dalam meningkatkan

748
00:32:00,180 --> 00:32:02,869
standar mereka, maka
masalah-masalah ini akan membesar.

749
00:32:02,869 --> 00:32:05,410
Sebagai contoh, sebelumnya
banyak kasus di mana sertifikat

750
00:32:05,410 --> 00:32:06,274
ditandai.

751
00:32:06,274 --> 00:32:07,690
Ya, ada dua
hal yang terjadi.

752
00:32:07,690 --> 00:32:09,420
Ada skema tanda tangan
kunci publik.

753
00:32:09,420 --> 00:32:13,080
Kemudian karena kriptografi kunci publik
mempunyai beberapa batasan,

754
00:32:13,080 --> 00:32:15,510
Anda biasanya-- sebenarnya,
saat Anda menandatangani pesan,

755
00:32:15,510 --> 00:32:17,360
Anda benar-benar menerima
hash dari pesan

756
00:32:17,360 --> 00:32:19,710
dan kemudian Anda menandatangani
hash itu sendiri karena

757
00:32:19,710 --> 00:32:21,860
sulit untuk menandatangani pesan
yang besar, tetapi

758
00:32:21,860 --> 00:32:24,347
mudah untuk menandatangani hash yang ringkas

759
00:32:24,347 --> 00:32:25,930
Dan satu hal yang
jadi tidak bekerja dengan baik lagi

760
00:32:25,930 --> 00:32:29,390
adalah bahwa orang-orang
menggunakan MD5 sebagai fungsi hash

761
00:32:29,390 --> 00:32:34,844
untuk mengecilkan pesan yang besar
ke dalam bentuk ukuran 128 bit

762
00:32:34,844 --> 00:32:36,510
yang Anda
akan benar-benar tandatangani

763
00:32:36,510 --> 00:32:38,400
dengan sistem kriptografi.

764
00:32:38,400 --> 00:32:40,930
MD5 dikatakan bagus 20 tahun yang
lalu, dan seiring waktu,

765
00:32:40,930 --> 00:32:43,770
orang menemukan kelemahan
pada MD5 yang dapat dieksploitasi.

766
00:32:43,770 --> 00:32:46,340
Jadi sebenarnya, pada
suatu titik, seseorang benar-benar

767
00:32:46,340 --> 00:32:49,560
meminta sertifikat dengan
hash MD5 tertentu,

768
00:32:49,560 --> 00:32:51,880
dan kemudian mereka
memikirkan dengan cermat

769
00:32:51,880 --> 00:32:56,610
pesan lain yang melakukan hash
pada nilai MDS yang sama.

770
00:32:56,610 --> 00:33:02,090
Dan hasilnya, sekarang Anda memiliki sebuah
tanda tangan oleh sebuah CA dengan hash tertentu,

771
00:33:02,090 --> 00:33:04,964
dan lalu Anda memiliki sebuah pesan
berbeda, sebuah kunci yang berbeda,

772
00:33:04,964 --> 00:33:06,380
atau sebuah nama yang
berbeda yang Anda dapat

773
00:33:06,380 --> 00:33:08,870
yakinkan bahwa seseorang telah ditandatangani.

774
00:33:08,870 --> 00:33:10,697
Dan ini memang terjadi.

775
00:33:10,697 --> 00:33:13,280
Seperti, jika Anda menghabiskan banyak waktu
berusaha memecahkan sebuah kunci,

776
00:33:13,280 --> 00:33:15,430
maka Anda pada
akhirnya akan berhasil.

777
00:33:15,430 --> 00:33:18,750
Jika sertifikat tersebut
menggunakan kriptografi,

778
00:33:18,750 --> 00:33:20,456
hal itu dapat di brute force (dicoba satu per satu).

779
00:33:20,456 --> 00:33:22,830
Contoh lain dari sesuatu
yang mungkin tidak terlalu bagus

780
00:33:22,830 --> 00:33:24,067
sekarang adalah jika Anda menggunakan RSA.

781
00:33:24,067 --> 00:33:25,525
Kita belum benar-benar
berbicara mengenai RSA,

782
00:33:25,525 --> 00:33:27,465
namun RSA adalah salah satu dari
kumpulan sistem kriptografi kunci publik

783
00:33:27,465 --> 00:33:30,370
yang memungkinkan kita untuk baik
mengenkripsi pesan-pesan ataupun menandatangani

784
00:33:30,370 --> 00:33:31,610
pesan.

785
00:33:31,610 --> 00:33:34,560
Dengan RSA, pada hari-hari
ini, mungkin saja

786
00:33:34,560 --> 00:33:38,965
untuk untuk menghabiskan banyak uang
dan memecahkan kunci RSA 1,000 bit.

787
00:33:38,965 --> 00:33:41,090
Anda kemungkinan harus
menghabiskan cukup banyak usaha,

788
00:33:41,090 --> 00:33:44,850
tetapi hal itu dapat dikerjakan, mungkin
dalam setahun dengan mudah.

789
00:33:44,850 --> 00:33:46,140
Dari situ, pastinya.

790
00:33:46,140 --> 00:33:49,720
Anda dapat meminta otoritas
sertifikat untuk menandatangi beberapa pesan,

791
00:33:49,720 --> 00:33:52,850
atau Anda bahkan bisa mengambil
kunci publik seseorang yang sudah ada

792
00:33:52,850 --> 00:33:55,680
dan mecoba melakukan brute force pada
kunci rahasia yang terkait, atau

793
00:33:55,680 --> 00:33:56,430
[? meretas manual. ?]

794
00:33:56,430 --> 00:34:01,630
Jadi Anda harus mengikuti
penyerang dalam beberapa hal.

795
00:34:01,630 --> 00:34:03,745
Anda harus menggunakan kunci
yang lebih besar dengan RSA.

796
00:34:03,745 --> 00:34:05,870
Atau mungkin Anda harus menggunakan
skema kriptografi yang berbeda.

797
00:34:05,870 --> 00:34:08,031
Sebagai contoh, saat ini orang
tidak lagi menggunakan hash MD5

798
00:34:08,031 --> 00:34:08,739
dan sertifikat.

799
00:34:08,739 --> 00:34:11,167
Mereka menggunakan SHA-1, tetapi
hal itu baik untuk sementara waktu.

800
00:34:11,167 --> 00:34:13,250
Sekarang SHA-1 juga lemah,
dan Google saat ini sedang

801
00:34:13,250 --> 00:34:17,010
aktif mencoba untuk mendorong
pengembang web dan pembuat peramban

802
00:34:17,010 --> 00:34:19,712
dan yang lainnya untuk tidak
melanjutkan penggunaan dari SHA-1

803
00:34:19,712 --> 00:34:21,920
dan menggunakan fungsi hash
yang berbeda karena terlihat cukup

804
00:34:21,920 --> 00:34:24,489
jelas dalam kurun waktu sekitar
5 sampai 10 tahun kedepan,

805
00:34:24,489 --> 00:34:27,070
akan terdapat serangan yang
relatif mudah terhadap SHA-1.

806
00:34:27,070 --> 00:34:29,000
Hal ini sudah
terbukti lebih lemah.

807
00:34:29,000 --> 00:34:31,931
Jadi saya rasa tidak ada
solusi ajaib untuk hal ini.

808
00:34:31,931 --> 00:34:33,389
Anda hanya harus
memastikan bahwa Anda

809
00:34:33,389 --> 00:34:36,650
terus berkembang bersama para peretas.

810
00:34:36,650 --> 00:34:37,908
Ya.

811
00:34:37,908 --> 00:34:39,199
Tentu saja terdapat masalah.

812
00:34:39,199 --> 00:34:41,199
Seperti, semua hal yang
sedang kita bicarakan ini

813
00:34:41,199 --> 00:34:44,330
bergantung pada kriptografi yang benar,
atau sesuatu yang sulit untuk dipecahkan.

814
00:34:44,330 --> 00:34:47,166
Jadi Anda perlu memilih
parameter yang sesuai.

815
00:34:47,166 --> 00:34:49,179
Setidaknya di sini, terdapat
waktu kadaluwarsa.

816
00:34:49,179 --> 00:34:51,800
Jadi, mari kita pilih
beberapa parameter

817
00:34:51,800 --> 00:34:53,980
yang baik untuk satu tahun
dibandingkan untuk 10 tahun.

818
00:34:53,980 --> 00:34:55,820
CA memiliki masalah
yang jauh lebih besar.

819
00:34:55,820 --> 00:34:59,570
Kunci ini, tentu saja, tidak
memiliki waktu kadaluwarsa didalamnya.

820
00:34:59,570 --> 00:35:02,770
Jadi semakin tidak jelas
apa yang sedang terjadi.

821
00:35:02,770 --> 00:35:05,360
Jadi mungkin, Anda dengan sangat
agresif akan memilih semacam

822
00:35:05,360 --> 00:35:07,400
parameter yang aman.

823
00:35:07,400 --> 00:35:11,160
Jadi sekitar 4,000 atau 6,000
bit RSA.

824
00:35:11,160 --> 00:35:12,570
Atau skema yang lain secara bersamaan.

825
00:35:12,570 --> 00:35:13,920
Jangan menggunakan SHA-1 sama sekali disini.

826
00:35:16,710 --> 00:35:17,380
Ya.

827
00:35:17,380 --> 00:35:19,500
Tidak ada jawaban yang benar-benar tepat.

828
00:35:19,500 --> 00:35:21,490
Anda hanya perlu melakukannya.

829
00:35:21,490 --> 00:35:21,990
Baiklah.

830
00:35:21,990 --> 00:35:24,320
Ada pertanyaan lain?

831
00:35:24,320 --> 00:35:24,960
Baiklah.

832
00:35:24,960 --> 00:35:27,740
Jadi mari kita sekarang lihat ke-- jadi
ini hanya seperti sisi protokol

833
00:35:27,740 --> 00:35:28,370
dari hal-hal ini.

834
00:35:28,370 --> 00:35:30,240
Mari sekarang kita lihat bagaimana
cara kita mengintegrasikan hal ini

835
00:35:30,240 --> 00:35:34,420
ke dalam aplikasi tertentu,
seperti peramban web?

836
00:35:34,420 --> 00:35:38,640
Jadi saya rasa jika Anda ingin mengamankan
komunikasi antar jaringan, atau semacam

837
00:35:38,640 --> 00:35:41,490
situs web, yang menggunakan
kriptografi, sebenarnya

838
00:35:41,490 --> 00:35:44,650
terdapat tiga hal yang harus
kita lindungi di peramban.

839
00:35:44,650 --> 00:35:48,220
Jadi hal pertama yang harus kita
lindungi adalah data di dalam jaringan.

840
00:35:51,922 --> 00:35:55,421
Dan ini adalah bagian yang cukup
mudah karena, kita

841
00:35:55,421 --> 00:35:57,420
hanya akan menjalankan sebuah
protokol yang sangat mirip dengan

842
00:35:57,420 --> 00:35:58,810
yang saya jelaskan sejauh ini.

843
00:35:58,810 --> 00:36:00,920
Kita akan mengenkripsi semua
pesan, kemudian menandatanginya,

844
00:36:00,920 --> 00:36:02,670
lalu memastikan mereka
belum dirusak,

845
00:36:02,670 --> 00:36:04,410
dan semua hal hebat ini.

846
00:36:04,410 --> 00:36:06,620
Jadi begitulah cara kita
untuk melindungi data.

847
00:36:06,620 --> 00:36:08,850
Namun ada dua hal lain
yang terdapat dalam peramban web

848
00:36:08,850 --> 00:36:11,315
yang benar-benar perlu
kita khawatirkan.

849
00:36:11,315 --> 00:36:13,970
Jadi yang pertama
adalah apa pun yang

850
00:36:13,970 --> 00:36:15,340
sebenarnya jalan di peramban.

851
00:36:15,340 --> 00:36:16,960
Jadi kode yang sedang jalan
di peramban,

852
00:36:16,960 --> 00:36:19,510
seperti JavaScript atau
data penting yang

853
00:36:19,510 --> 00:36:21,340
disimpan di peramban.

854
00:36:21,340 --> 00:36:24,950
Mungkin cookies Anda, atau penyimpanan
lokal, atau banyak hal lainnya

855
00:36:24,950 --> 00:36:27,005
yang berjalan terus di sebuah
peramban modern semuanya

856
00:36:27,005 --> 00:36:29,795
harus entah bagiamana dilindungi
dari jaringan [? para peretas. ?]

857
00:36:29,795 --> 00:36:31,170
Dan kita akan melihat
berbagai hal yang

858
00:36:31,170 --> 00:36:33,390
perlu kita khawatirkan
di sini sesaat lagi.

859
00:36:33,390 --> 00:36:36,920
Dan hal terakhir yang Anda
mungkin tidak pikirkan terlalu banyak

860
00:36:36,920 --> 00:36:40,060
tapi ternyata menjadi sebuah
masalah nyata dalam praktiknya

861
00:36:40,060 --> 00:36:43,950
adalah melindungi
antarmuka pengguna.

862
00:36:43,950 --> 00:36:47,472
Dan alasannya adalah
karena pada akhirnya,

863
00:36:47,472 --> 00:36:49,930
sebagian besar data rahasia
yang ingin kita lindungi

864
00:36:49,930 --> 00:36:50,763
berasal dari pengguna.

865
00:36:50,763 --> 00:36:53,829
Dan pengguna memberikan hal ini
ke dalam sebuah situs web,

866
00:36:53,829 --> 00:36:55,620
dan pengguna mungkin saja
menggunakan beberapa situs web

867
00:36:55,620 --> 00:36:57,411
yang terbuka di komputer mereka
sehingga pengguna harus dapat

868
00:36:57,411 --> 00:36:59,760
membedakan pada situs mana
mereka benar-benar

869
00:36:59,760 --> 00:37:01,980
berinteraksi
setiap saatnya.

870
00:37:01,980 --> 00:37:04,690
Jika mereka tidak sengaja mengetikkan
kata sandi Amazon mereka pada sebuah

871
00:37:04,690 --> 00:37:06,674
forum diskusi di web, hal tersebut
dapat menjadi bencana

872
00:37:06,674 --> 00:37:09,090
tergantung pada seberapa besar Anda
peduli dengan kata sandi Amazon Anda,

873
00:37:09,090 --> 00:37:10,680
tapi tetap saja.

874
00:37:10,680 --> 00:37:14,550
Jadi Anda benar-benar ingin
memiliki elemen antarmuka pengguna

875
00:37:14,550 --> 00:37:17,077
yang baik yang membantu
pengguna mengetahui

876
00:37:17,077 --> 00:37:17,910
apa yang mereka lakukan?

877
00:37:17,910 --> 00:37:20,500
Apakah saya mengetikkan data
rahasia ke situs web yang tepat,

878
00:37:20,500 --> 00:37:23,590
atau apa yang akan terjadi pada
data ini ketika saya mengirimkannya?

879
00:37:23,590 --> 00:37:30,360
Jadi hal ini ternyata menjadi
masalah yang cukup penting untuk melindungi

880
00:37:30,360 --> 00:37:33,380
aplikasi web.

881
00:37:33,380 --> 00:37:34,170
Baiklah.

882
00:37:34,170 --> 00:37:35,080
Masuk akal?

883
00:37:35,080 --> 00:37:37,760
Jadi mari kita bicarakan apa yang
sebenarnya dilakukan peramban web

884
00:37:37,760 --> 00:37:39,890
pada bagian depan ini.

885
00:37:39,890 --> 00:37:42,510
Jadi seperti yang saya sebutkan, bagian ini
untuk melindungi [TIDAK TERDENGAR],

886
00:37:42,510 --> 00:37:47,290
kita hanya akan menggunakan protokol
yang disebut SSL atau TLS ini sekarang

887
00:37:47,290 --> 00:37:49,000
yang mengenkripsi dan
mengautentikasi data.

888
00:37:49,000 --> 00:37:51,670
Hal ini terlihat sangat mirip dengan
diskusi yang kita lakukan

889
00:37:51,670 --> 00:37:53,110
sejauh ini.

890
00:37:53,110 --> 00:37:56,180
Hal ini meliputi otoritas
sertifikat, dan sebagainya.

891
00:37:56,180 --> 00:37:58,710
Dan tentu saja,
terdapat banyak detail lainnya.

892
00:37:58,710 --> 00:38:02,080
Seperti, TLS sangat
rumit, Tetapi hal tersebut tidak

893
00:38:02,080 --> 00:38:06,064
terlalu menarik
dari sudut [TIDAK TERDENGAR] ini.

894
00:38:06,064 --> 00:38:08,230
Baiklah, jadi melindungi,
[? berhenti ?] peramban

895
00:38:08,230 --> 00:38:10,670
ternyata jauh
lebih menarik.

896
00:38:10,670 --> 00:38:13,950
Dan alasannya adalah
kita harus memastikan

897
00:38:13,950 --> 00:38:19,520
bahwa kode atau data apa pun yang dikirimkan
melalui koneksi yang tidak terenkripsi

898
00:38:19,520 --> 00:38:22,090
tidak dapat merusak
kode dan data yang

899
00:38:22,090 --> 00:38:24,121
berasal dari
koneksi yang terenkripsi

900
00:38:24,121 --> 00:38:26,620
karena model ancaman kita adalah
segala sesuatu yang tidak terenkripsi

901
00:38:26,620 --> 00:38:30,970
berpotensi untuk dirusak
oleh jaringan [? penyokong. ?]

902
00:38:30,970 --> 00:38:33,730
Jadi kita harus
memastikan jika kita

903
00:38:33,730 --> 00:38:38,250
memiliki beberapa kode JavaScript yang 
tidak terenkripsi berjalan pada peramban kita,

904
00:38:38,250 --> 00:38:40,220
maka kita harus berasumsi
bahwa hal itu bisa saja

905
00:38:40,220 --> 00:38:41,750
dirusak oleh penyerang
karena tidak terenkripsi.

906
00:38:41,750 --> 00:38:44,077
Hal tersebut tidak terautentikasi
melalui jaringan.

907
00:38:44,077 --> 00:38:45,660
Dan akibatnya,
kita harus mencegahnya

908
00:38:45,660 --> 00:38:48,790
dari merusak halaman
apapun yang dikirimkan

909
00:38:48,790 --> 00:38:50,749
melalui koneksi terenkripsi.

910
00:38:50,749 --> 00:38:52,540
Jadi strategi umum
untuk hal ini adalah kita akan

911
00:38:52,540 --> 00:38:56,620
memperkenalkan skema URL baru.

912
00:38:56,620 --> 00:38:57,950
Sebut saja HTTPS.

913
00:38:57,950 --> 00:39:02,710
Jadi Anda sering melihat ini di URL,
mungkin dalam kehidupan Anda.

914
00:39:02,710 --> 00:39:07,640
Dan akan terdapat dua hal
yang-- baiklah, pertama-tama

915
00:39:07,640 --> 00:39:10,190
hal yang keren dari memperkenalkan
skema URL yang baru adalah

916
00:39:10,190 --> 00:39:13,440
sekarang, URL ini merupakan
hal yang berbeda dari URL HTTP.

917
00:39:13,440 --> 00:39:16,560
Jadi jika Anda melihat URL
yang memiliki HTTPS titik dua

918
00:39:16,560 --> 00:39:19,290
sesuatu-sesuatu, hal tersebut
memiliki asal yang berbeda

919
00:39:19,290 --> 00:39:23,420
berkaitan dengan kebijakan asal
yang sama (same origin policy) dari URL HTTP

920
00:39:23,420 --> 00:39:24,350
biasa.

921
00:39:24,350 --> 00:39:26,680
Jadi URL HTTP berjalan
pada koneksi yang tidak terenkripsi.

922
00:39:26,680 --> 00:39:29,430
Koneksi tersebut berjalan
di atas SSL/TLS.

923
00:39:29,430 --> 00:39:31,770
Jadi Anda tidak akan bingung
melihat keduanya jika kebijakan

924
00:39:31,770 --> 00:39:35,130
asal yang samanya melakukan pekerjaannya dengan baik.

925
00:39:35,130 --> 00:39:37,320
Jadi hal tersebut menjadi sebuah teka-teki.

926
00:39:37,320 --> 00:39:39,180
Namun kemudian Anda
harus dapat memastikan

927
00:39:39,180 --> 00:39:44,040
bahwa Anda mengenali dengan benar
situs-situs terenkripsi yang berbeda yang

928
00:39:44,040 --> 00:39:44,940
satu dengan yang lain.

929
00:39:44,940 --> 00:39:47,420
Namun ternyata cookie
memiliki aturan yang berbeda

930
00:39:47,420 --> 00:39:49,072
karena alasan historis.

931
00:39:49,072 --> 00:39:50,530
Jadi mari pertama-tama kita bicarakan
bagaimana cara kita

932
00:39:50,530 --> 00:39:52,740
untuk membedakan situs-situs
terenkripsi yang berbeda

933
00:39:52,740 --> 00:39:53,980
antara satu dengan yang lain.

934
00:39:53,980 --> 00:39:56,010
Jadi rencana untuk hal itu
sebenarnya adalah,

935
00:39:56,010 --> 00:40:02,965
nama host yang ada di URL harus
menjadi nama yang ada di sertifikat.

936
00:40:05,730 --> 00:40:07,627
Jadi itulah
yang sebenarnya

937
00:40:07,627 --> 00:40:09,126
akan ditandatangani
oleh

938
00:40:09,126 --> 00:40:10,600
otoritas sertifikat
di pada akhirnya

939
00:40:10,600 --> 00:40:14,150
Jadi kita akan benar-benar
menandatangani nama host yang muncul

940
00:40:14,150 --> 00:40:18,510
pada URL Anda sebagai nama untuk
kunci publik server web Anda.

941
00:40:18,510 --> 00:40:22,684
Jadi Amazon mungkin memiliki
sertifikat untuk www.amazon.com.

942
00:40:22,684 --> 00:40:24,100
Itulah namanya,
dan apapun

943
00:40:24,100 --> 00:40:27,000
kunci publik yang terkait
dengan kunci rahasia mereka.

944
00:40:27,000 --> 00:40:29,050
Dan inilah yang akan
dicari oleh peramban.

945
00:40:29,050 --> 00:40:31,970
Jadi jika peramban mendapatkan
sertifikat-- yah,

946
00:40:31,970 --> 00:40:38,016
jika mencoba untuk menghubungkan atau mendapatkan
sebuah URL yaitu https://foo.com,

947
00:40:38,016 --> 00:40:40,620
sebaiknya itu menjadi kasus di mana
server menyediakan sertifikat

948
00:40:40,620 --> 00:40:42,570
yang tepat untuk foo.com.

949
00:40:42,570 --> 00:40:45,560
Sebaliknya, mari kita katakan, ya, kita
mencoba untuk terhubung dengan seseorang,

950
00:40:45,560 --> 00:40:47,500
tapi sebenarnya kita sudah
memiliki orang lain.

951
00:40:47,500 --> 00:40:49,680
Itu adalah nama yang
berbeda dalam sertifikat

952
00:40:49,680 --> 00:40:50,890
yang kita sambungkan.

953
00:40:50,890 --> 00:40:54,690
Dan itu akan menjadi sebuah
ketidakcocokan sertifikat.

954
00:40:54,690 --> 00:40:57,230
Jadi begitulah cara kita untuk
membedakan situs yang berbeda

955
00:40:57,230 --> 00:40:57,730
satu dengan yang lainnnya.

956
00:40:57,730 --> 00:40:59,229
Pada dasarnya kita
akan meminta CA

957
00:40:59,229 --> 00:41:01,370
untuk membantu kita
membedakan situs-situs tersebut,

958
00:41:01,370 --> 00:41:03,630
dan CA akan berjanji
untuk mengeluarkan sertifikat

959
00:41:03,630 --> 00:41:05,872
hanya pada entitas yang benar.

960
00:41:05,872 --> 00:41:07,330
Jadi dalam sisi
batas kebijakan yang

961
00:41:07,330 --> 00:41:11,300
sama, bagaimana kita akan
memisahkan kodenya.

962
00:41:11,300 --> 00:41:15,050
Dan ternyata--
seperti yang mungkin Anda ingat,

963
00:41:15,050 --> 00:41:17,475
cookies memiliki kebijakan
yang sedikit berbeda.

964
00:41:17,475 --> 00:41:20,800
Seperti, memiliki kebijakan asal yang
sama, namun tidak semuanya.

965
00:41:20,800 --> 00:41:23,980
Jadi cookies memiliki sebuah
rancangan yang sedikit berbeda.

966
00:41:23,980 --> 00:41:30,610
Jadi cookies memiliki tanda aman ini
yang dapat Anda pasang pada sebuah cookie.

967
00:41:30,610 --> 00:41:34,220
Jadi aturannya adalah, jika sebuah
cookie memiliki sebuah tanda aman,

968
00:41:34,220 --> 00:41:39,940
maka itu hanya dikirim
pada permintaan HTTPS,

969
00:41:39,940 --> 00:41:42,330
atau bersamaan dengan permintaan HTTPS.

970
00:41:42,330 --> 00:41:45,700
Dan jika cookie tidak
memiliki tanda aman,

971
00:41:45,700 --> 00:41:49,590
maka hal itu berlaku untuk
permintaan HTTP dan HTTPS.

972
00:41:49,590 --> 00:41:51,600
Yah, itu sedikit
agak rumit, ya.

973
00:41:51,600 --> 00:41:53,640
Hal ini akan lebih jelas
jika cookie hanya mengatakan,

974
00:41:53,640 --> 00:41:57,080
ini adalah cookie
untuk posting HTTPS,

975
00:41:57,080 --> 00:41:58,700
dan ini adalah cookie
untuk host HTTPS.

976
00:41:58,700 --> 00:42:00,470
Dan keduanya
benar-benar berbeda.

977
00:42:00,470 --> 00:42:03,410
Hal ini akan sangat jelas dalam
hal mengisolasi situs yang aman

978
00:42:03,410 --> 00:42:05,007
dari situs yang tidak aman.

979
00:42:05,007 --> 00:42:06,590
Sayangnya, karena
alasan historis,

980
00:42:06,590 --> 00:42:09,370
cookie memiliki semacam
bentuk interaksi yang aneh.

981
00:42:09,370 --> 00:42:12,250
Jadi jika cookie ditandai
aman, maka itu hanya

982
00:42:12,250 --> 00:42:14,660
berlaku untuk situs HTTPS.

983
00:42:14,660 --> 00:42:16,830
Ya, terdapat host
juga didalamnya.

984
00:42:16,830 --> 00:42:20,920
Jadi cookie yang aman hanya
berlaku untuk URL dengan host HTTPS,

985
00:42:20,920 --> 00:42:22,740
dan cookie yang tidak aman
berlaku untuk keduanya.

986
00:42:22,740 --> 00:42:27,310
Jadi hal itu akan menjadi
sumber masalah bagi kita.

987
00:42:27,310 --> 00:42:29,450
Masuk akal?

988
00:42:29,450 --> 00:42:30,080
Baiklah.

989
00:42:30,080 --> 00:42:32,490
Dan bagian terakhir yang
dilakukan peramban web

990
00:42:32,490 --> 00:42:38,870
untuk mencoba membantu kita dalam
rencana ini adalah untuk aspek antarmuka pengguna,

991
00:42:38,870 --> 00:42:43,540
peramban web memperkenalkan
semacam ikon kunci

992
00:42:43,540 --> 00:42:45,660
yang dapat dilihat oleh pengguna.

993
00:42:45,660 --> 00:42:48,220
Jadi terdapat ikon kunci
dalam peramban Anda,

994
00:42:48,220 --> 00:42:51,150
dan Anda harus melihat
URL untuk mencari tahu

995
00:42:51,150 --> 00:42:52,150
pada situs mana Anda berada.

996
00:42:52,150 --> 00:42:55,860
Begitulah cara pengembang
peramban web mengharapkan

997
00:42:55,860 --> 00:42:57,030
Anda untuk memikirkannya.

998
00:42:57,030 --> 00:43:00,100
Seperti, jika Anda pernah
memasukkan hal-hal pribadi

999
00:43:00,100 --> 00:43:02,850
ke dalam sebuah halaman web, maka
Anda seharusnya melihat pada URL,

1000
00:43:02,850 --> 00:43:04,816
untuk memastikan bahwa
nama host yang seharusnya

1001
00:43:04,816 --> 00:43:06,690
ingin Anda ajak
berkomunikasi, lalu cari

1002
00:43:06,690 --> 00:43:08,980
semacam ikon kunci,
kemudian Anda

1003
00:43:08,980 --> 00:43:10,755
dapat berasumsi semuanya
akan baik-baik saja.

1004
00:43:10,755 --> 00:43:12,735
Jadi itulah aspek antarmuka-nya.

1005
00:43:12,735 --> 00:43:13,360
Hal ini tidak bagus.

1006
00:43:13,360 --> 00:43:17,880
Ternyata dari banyaknya
situs phising hanya akan

1007
00:43:17,880 --> 00:43:20,800
menyertakan gambar ikon
kunci di dalam situsnya

1008
00:43:20,800 --> 00:43:21,960
dan memiliki URL yang berbeda.

1009
00:43:21,960 --> 00:43:24,030
Dan jika Anda tidak tahu
secara pasti apa yang dicari

1010
00:43:24,030 --> 00:43:29,210
atau apa yang terjadi, pengguna
mungkin tertipu oleh hal ini.

1011
00:43:29,210 --> 00:43:31,960
Jadi sisi antarmuka ini
agak berantakan,

1012
00:43:31,960 --> 00:43:34,790
sebagian karena pengguna
berantakan, seperti manusia.

1013
00:43:34,790 --> 00:43:36,515
Dan sangat sulit
untuk mengatakan apa

1014
00:43:36,515 --> 00:43:37,640
hal yang benar untuk dilakukan di sini.

1015
00:43:37,640 --> 00:43:40,110
Jadi kita akan lebih fokus
pada aspek ini,

1016
00:43:40,110 --> 00:43:43,652
yang jauh lebih mudah
untuk dibahas secara tepat.

1017
00:43:43,652 --> 00:43:45,290
Masuk akal?

1018
00:43:45,290 --> 00:43:47,665
Ada pertanyaan tentang
hal ini?

1019
00:43:47,665 --> 00:43:48,164
Yah.

1020
00:43:48,164 --> 00:43:49,538
AUDIENS: Saya perhatikan
beberapa situs web

1021
00:43:49,538 --> 00:43:51,624
bahwa HTTPS kita [TIDAK TERDENGAR].

1022
00:43:51,624 --> 00:43:52,290
PROFESOR: Yah.

1023
00:43:52,290 --> 00:43:57,030
Jadi ternyata browser berkembang
dari waktu ke waktu terkait apa

1024
00:43:57,030 --> 00:43:59,820
artinya untuk mendapatkan ikon kunci.

1025
00:43:59,820 --> 00:44:03,370
Jadi satu hal yang
beberapa browser lakukan

1026
00:44:03,370 --> 00:44:06,390
adalah mereka memberi Anda
ikon gembok hanya

1027
00:44:06,390 --> 00:44:09,850
jika semua konten atau
sumberdaya dalam halaman Anda

1028
00:44:09,850 --> 00:44:11,462
juga disajikan melalui HTTPS.

1029
00:44:11,462 --> 00:44:12,920
Jadi ini adalah salah satu dari
masalah-masalah yang

1030
00:44:12,920 --> 00:44:15,680
memaksa HTTPS untuk mencoba
mengatasi konten

1031
00:44:15,680 --> 00:44:19,910
campuran atau masalah
penanaman tidak aman ini.

1032
00:44:19,910 --> 00:44:22,290
Jadi kadang-kadang, Anda akan gagal
untuk mendapatkan ikon kunci karena

1033
00:44:22,290 --> 00:44:23,950
pemeriksaan tersebut.

1034
00:44:23,950 --> 00:44:25,820
Di lain waktu, mungkin
sertifikat Anda

1035
00:44:25,820 --> 00:44:26,820
tidak cukup baik.

1036
00:44:26,820 --> 00:44:29,700
Jadi misalnya, Chrome tidak
akan memberi Anda ikon kunci

1037
00:44:29,700 --> 00:44:34,430
Jika ia berpikir sertifikat Anda
menggunakan kriptografi yang lemah.

1038
00:44:34,430 --> 00:44:35,990
Tetapi juga, itu bervariasi
antara satu browser dengan browser lainnya.

1039
00:44:35,990 --> 00:44:38,280
Jadi Chrome mungkin tidak
akan memberi Anda ikon kunci,

1040
00:44:38,280 --> 00:44:39,470
tetapi Firefox akan memberikannya.

1041
00:44:39,470 --> 00:44:43,000
Jadi, sekali lagi,
tidak ada spesifikasi yang jelas

1042
00:44:43,000 --> 00:44:44,920
tentang apa arti ikon kunci ini.

1043
00:44:44,920 --> 00:44:51,060
Hanya orang-orang menyapu barang
dibawah ikon kunci ini.

1044
00:44:51,060 --> 00:44:54,114
Ada pertanyaan lain?

1045
00:44:54,114 --> 00:44:55,090
Baiklah.

1046
00:44:55,090 --> 00:44:58,830
Jadi mari kita menebak
masalah seperti apa

1047
00:44:58,830 --> 00:45:01,082
yang kita hadapi dalam rencana ini.

1048
00:45:01,082 --> 00:45:03,290
Satu hal yang menurut saya
pertama kali kita harus bicarakan

1049
00:45:03,290 --> 00:45:07,540
adalah, OK, jadi di dalam
HTTP biasa, kita 

1050
00:45:07,540 --> 00:45:11,010
mengandalkan DNS untuk
memberi kita alamat IP yang benar

1051
00:45:11,010 --> 00:45:13,100
di server.

1052
00:45:13,100 --> 00:45:17,595
Jadi seberapa besar kita dapat
mempercayai DNS untuk URL HTTPS ini?

1053
00:45:20,960 --> 00:45:24,049
Apakah server DNS tepercaya,
atau apakah pemetaan DNS ini

1054
00:45:24,049 --> 00:45:25,090
penting buat kita?

1055
00:45:28,360 --> 00:45:28,860
Yah.

1056
00:45:28,860 --> 00:45:30,860
AUDIENS: Itu
karena sertifikat tersebut 

1057
00:45:30,860 --> 00:45:32,819
menandatangani nama domain.

1058
00:45:32,819 --> 00:45:34,860
Saya rasa Anda tidak menandatangani sebuah
alamat IP [TIDAK TERDENGAR]

1059
00:45:34,860 --> 00:45:35,170
PROFESOR: Benar.

1060
00:45:35,170 --> 00:45:35,390
Yah.

1061
00:45:35,390 --> 00:45:37,098
Jadi sertifikat
menandatangani nama domain.

1062
00:45:37,098 --> 00:45:38,430
Jadi ini seperti amazon.com.

1063
00:45:42,040 --> 00:45:43,840
Jadi [TIDAK TERDENGAR].

1064
00:45:43,840 --> 00:45:47,776
AUDIENS: Katakanlah seseorang mencuri
kunci privat amazon.com

1065
00:45:47,776 --> 00:45:51,220
dan [TIDAK TERDENGAR] server lain
dengan alamat IP lain,

1066
00:45:51,220 --> 00:45:54,849
dan menggabungkan [TIDAK TERDENGAR]
alamat IP [TIDAK TERDENGAR].

1067
00:45:54,849 --> 00:45:56,640
Tapi kemudian Anda telah
mencuri private key-nya.

1068
00:45:56,640 --> 00:45:57,030
PROFESOR: Benar.

1069
00:45:57,030 --> 00:45:57,530
Yah.

1070
00:45:57,530 --> 00:45:59,220
Jadi sebenarnya, Anda
menjelaskan setelah keduanya

1071
00:45:59,220 --> 00:46:02,880
mencuri kunci privat dan
mengalihkan DNS ke diri Anda sendiri.

1072
00:46:02,880 --> 00:46:07,852
Jadi apakah DNS itu sendiri cukup sensitif
untuk kita pedulikan?

1073
00:46:07,852 --> 00:46:09,310
Saya kira dalam beberapa
hal Anda benar,

1074
00:46:09,310 --> 00:46:11,130
bahwa kita memerlukan DNS
untuk mencari idenya,

1075
00:46:11,130 --> 00:46:13,615
atau sebaliknya kita akan tersasar
karena ini hanya nama host

1076
00:46:13,615 --> 00:46:15,990
nya saja, dan kita tetap harus
mencari alamat IP untuk berkomunikasi dengannya.

1077
00:46:15,990 --> 00:46:17,830
Bagaimana jika seseorang
merusak server DNS

1078
00:46:17,830 --> 00:46:19,814
dan mengarahkan kita pada sebuah
alamat IP yang berbeda?

1079
00:46:19,814 --> 00:46:20,730
Apakah hal itu akan menjadi hal yang buruk?

1080
00:46:20,730 --> 00:46:21,230
Yah.

1081
00:46:21,230 --> 00:46:25,019
AUDIENS: Ya, mungkin
hanya [TIDAK TERDENGAR] HTTPS.

1082
00:46:25,019 --> 00:46:26,810
PROFESOR: Jadi berpotensi
mengkhawatirkan, benar.

1083
00:46:26,810 --> 00:46:28,763
Jadi mereka mungkin saja menolak
koneksinya.

1084
00:46:28,763 --> 00:46:29,709
AUDIENS: Yah, tidak.

1085
00:46:29,709 --> 00:46:31,810
Mereka hanya mengalihkan
Anda ke URL HTTP.

1086
00:46:31,810 --> 00:46:33,351
PROFESOR: Yah, jadi
tentunya, jika Anda

1087
00:46:33,351 --> 00:46:37,290
terkoneksi ke sana melalui HTTPS,
maka mereka tidak bisa dialihkan.

1088
00:46:37,290 --> 00:46:39,660
Tapi yah.

1089
00:46:39,660 --> 00:46:40,160
Yah.

1090
00:46:40,160 --> 00:46:44,660
AUDIENS: anda bisa [TAK TERDENGAR]
dan mencoba untuk membohongi pengguna.

1091
00:46:44,660 --> 00:46:46,520
Hal itu [TAK TERDENGAR].

1092
00:46:46,520 --> 00:46:47,770
PROFESOR: Itu benar, yah.

1093
00:46:47,770 --> 00:46:49,960
Jadi hal yang Anda
sebutkan adalah

1094
00:46:49,960 --> 00:46:53,190
bahwa Anda bisa mencoba untuk menyediakan
sertifikat yang berbeda.

1095
00:46:53,190 --> 00:46:56,097
Jadi mungkin Anda-- yah, satu
kemungkinan adalah Anda entah bagaimana

1096
00:46:56,097 --> 00:46:57,930
merusak CA nya, di
mana dalam hal ini tidak apa-apa,

1097
00:46:57,930 --> 00:46:59,470
bisnis Anda masih berjalan.

1098
00:46:59,470 --> 00:47:01,434
Kemungkinan lain adalah
mungkin Anda hanya akan menandatangani

1099
00:47:01,434 --> 00:47:02,600
sertifikat sendiri.

1100
00:47:02,600 --> 00:47:04,725
Atau mungkin anda memiliki
sertifikat lama untuk orang ini

1101
00:47:04,725 --> 00:47:08,240
yang Anda dapatkan
kunci privatnya.

1102
00:47:08,240 --> 00:47:11,070
Dan ternyata
browser web,

1103
00:47:11,070 --> 00:47:14,300
seperti paper HTTPS paksaan yang
kita baca ini membahas,

1104
00:47:14,300 --> 00:47:18,570
sebagian besar browser web sebenarnya bertanya
kepada pengguna apakah ada sesuatu yang tidak

1105
00:47:18,570 --> 00:47:20,205
beres dengan
sertifikat, yang

1106
00:47:20,205 --> 00:47:21,580
sepertinya 
hal yang cukup aneh

1107
00:47:21,580 --> 00:47:23,850
untuk dilakukan karena inilah peraturannya.

1108
00:47:23,850 --> 00:47:26,300
Nama host harus cocok dengan
nama sertifikat,

1109
00:47:26,300 --> 00:47:27,400
dan itu harus valid.

1110
00:47:27,400 --> 00:47:30,450
Dia tidak boleh kedaluwarsa,
semua aturan yang sangat jelas ini.

1111
00:47:30,450 --> 00:47:34,640
Tetapi karena secara historis
cara HTTPS dipasangkan, 

1112
00:47:34,640 --> 00:47:38,030
sering kali
operator server web

1113
00:47:38,030 --> 00:47:40,270
salah mengonfigurasi HTTPS.

1114
00:47:40,270 --> 00:47:43,330
Jadi mungkin mereka lupa
untuk memperbarui sertifikat mereka.

1115
00:47:43,330 --> 00:47:45,380
Segalanya akan berjalan
dengan baik dan Anda

1116
00:47:45,380 --> 00:47:47,697
tidak menyadari bahwa 
sertifikat Anda telah kedaluwarsa

1117
00:47:47,697 --> 00:47:49,030
dan Anda hanya lupa memperbaruinya.

1118
00:47:49,030 --> 00:47:51,368
Jadi bagi para
pengembang browser web,

1119
00:47:51,368 --> 00:47:52,576
sepertinya agak mengecewakan.

1120
00:47:52,576 --> 00:47:53,076
Astaga.

1121
00:47:53,076 --> 00:47:54,020
Itu baru saja kedaluwarsa

1122
00:47:54,020 --> 00:47:55,510
Mari kita biarkan
pengguna melanjutkan.

1123
00:47:55,510 --> 00:47:57,880
Jadi mereka menampilkan kotak dialog
untuk pengguna yang mengatakan,

1124
00:47:57,880 --> 00:47:59,610
yah, saya mendapatkan
sertifikat, tetapi itu

1125
00:47:59,610 --> 00:48:01,050
sepertinya terlihat ada yang salah.

1126
00:48:01,050 --> 00:48:04,220
[TIDAK TERDENGAR] mengabaikannya
dan tetap melanjutkan.

1127
00:48:04,220 --> 00:48:07,880
Jadi browser web akan akan mengizinkan
pengguna untuk semacam mengabaikan

1128
00:48:07,880 --> 00:48:10,785
keputusan ini pada hal-hal seperti
sertifikat yang kedaluwarsa.

1129
00:48:10,785 --> 00:48:13,287
Juga untuk nama host, 
bisa jadi

1130
00:48:13,287 --> 00:48:14,620
saat situs web Anda memiliki banyak nama.

1131
00:48:14,620 --> 00:48:16,440
Seperti untuk Amazon,
Anda mungkin terhubung

1132
00:48:16,440 --> 00:48:21,430
ke amazon.com, atau mungkin
www.amazon.com, atau mungkin

1133
00:48:21,430 --> 00:48:23,220
nama host lainnya.

1134
00:48:23,220 --> 00:48:26,007
Dan jika Anda tidak berhati-hati
dengan operator situs web,

1135
00:48:26,007 --> 00:48:27,590
Anda mungkin tidak tahu
untuk mendapatkan serifikat

1136
00:48:27,590 --> 00:48:30,910
untuk setiap kemungkinan nama
yang dimiliki situs web Anda.

1137
00:48:30,910 --> 00:48:33,615
Dan kemudian seorang pengguna
bisa menemui jalan buntu dan berkata, yah,

1138
00:48:33,615 --> 00:48:35,240
sepertinya ada yang salah
dengan nama host itu,

1139
00:48:35,240 --> 00:48:37,020
tapi mungkin mari kita tetap lanjutkan saja.

1140
00:48:37,020 --> 00:48:39,070
Jadi inilah alasan
mengapa browser web memungkinkan

1141
00:48:39,070 --> 00:48:44,560
pengguna untuk menerima lebih
luas, atau rentang

1142
00:48:44,560 --> 00:48:47,291
sertifikat yang lebih luas, daripada yang
ditentukan oleh aturan ini.

1143
00:48:47,291 --> 00:48:48,540
Jadi itu [TIDAK TERDENGAR] masalah.

1144
00:48:48,540 --> 00:48:51,484
Dan kemudian jika Anda
membajak DNS, kemudian Anda

1145
00:48:51,484 --> 00:48:52,900
mungkin dapat
mengalihkan pengguna

1146
00:48:52,900 --> 00:48:54,695
ke salah satu
situs ini yang menyediakan

1147
00:48:54,695 --> 00:48:56,830
sertifikat yang salah.

1148
00:48:56,830 --> 00:48:59,270
Dan jika pengguna tidak
berhati-hati, mereka

1149
00:48:59,270 --> 00:49:03,230
berpotensi menyetujui
browser menerima

1150
00:49:03,230 --> 00:49:07,102
sertifikat Anda, dan kemudian
Anda dalam masalah.

1151
00:49:07,102 --> 00:49:12,354
Itu adalah daerah abu-abu
berkaitan dengan seberapa besar

1152
00:49:12,354 --> 00:49:13,520
Anda harus benar-benar mempercayai DNS.

1153
00:49:13,520 --> 00:49:15,978
Jadi Anda tentu tidak ingin
memberikan pengguna acak mengontrol

1154
00:49:15,978 --> 00:49:17,890
nama DNS Anda [TIDAK TERDENGAR].

1155
00:49:17,890 --> 00:49:21,900
Namun yang pasti, tujuan
SSL/TLS dan HTTPS,

1156
00:49:21,900 --> 00:49:25,290
semua hal ini, adalah semoga untuk
tidak mempercayai DNS sama sekali.

1157
00:49:25,290 --> 00:49:27,940
Jika semuanya di sini
bekerja dengan benar,

1158
00:49:27,940 --> 00:49:30,150
maka DNS tidak boleh dipercaya.

1159
00:49:30,150 --> 00:49:31,794
Anda bisa [TIDAK TERDENGAR].

1160
00:49:31,794 --> 00:49:33,710
Anda seharusnya tidak pernah bisa
mencegat data apapun

1161
00:49:33,710 --> 00:49:36,612
atau data yang rusak, dan lain-lain.

1162
00:49:36,612 --> 00:49:37,847
Masuk akal?

1163
00:49:37,847 --> 00:49:39,430
Itu kalau semuanya
bekerja, tentu saja.

1164
00:49:39,430 --> 00:49:42,280
Kenyataannya sedikit lebih
berantakan dari itu.

1165
00:49:42,280 --> 00:49:43,990
Baiklah.

1166
00:49:43,990 --> 00:49:49,230
Jadi saya kira satu pertanyaan yang menarik
untuk dibicarakan

1167
00:49:49,230 --> 00:49:52,880
adalah saya kira seberapa buruk
serangan yang dapat terjadi

1168
00:49:52,880 --> 00:49:57,290
jika pengguna salah menyetujui
sebuah sertifikat?

1169
00:49:57,290 --> 00:49:59,150
Jadi seperti yang kita bicarakan,
jika pengguna menerima

1170
00:49:59,150 --> 00:50:02,110
sebuah sertifikat untuk host yang salah
atau menerima sebuah sertifikat yang kedaluwarsa,

1171
00:50:02,110 --> 00:50:05,300
hal buruk apa
yang bisa terjadi?

1172
00:50:05,300 --> 00:50:09,870
Seberapa besar kita harus khawatir terkait
kesalahan ini dari pengguna?

1173
00:50:09,870 --> 00:50:10,428
Yah.

1174
00:50:10,428 --> 00:50:11,594
AUDIENCE: Yah, [TIDAK TERDENGAR].

1175
00:50:14,870 --> 00:50:17,671
Tapi itu bisa saja,
[? pada contoh ?], bukan situs di mana

1176
00:50:17,671 --> 00:50:19,490
penggunanya ingin berkunjung.

1177
00:50:19,490 --> 00:50:24,252
Maka mereka bisa melakukan hal seperti
berpura-pura menjadi nama pengguna.

1178
00:50:24,252 --> 00:50:24,960
PROFESSOR: Benar.

1179
00:50:24,960 --> 00:50:27,515
Maka tentunya, saya rasa
pengguna mungkin kemudian

1180
00:50:27,515 --> 00:50:29,640
tertipu ke dalam pemikiran,
oh, saya memiliki semua uang ini,

1181
00:50:29,640 --> 00:50:32,230
atau Anda tidak memiliki uang sama sekali
karena halaman hasilnya menampilkan

1182
00:50:32,230 --> 00:50:34,010
kembali dengan mengatakan inilah saldo Anda.

1183
00:50:34,010 --> 00:50:35,940
Jadi mungkin pengguna
akan berasumsi sesuatu

1184
00:50:35,940 --> 00:50:39,070
tentang apa yang dimiliki bank
atau tidak dimiliki berdasarkan

1185
00:50:39,070 --> 00:50:41,830
hasilnya. Yah,
sepertinya masih buruk,

1186
00:50:41,830 --> 00:50:43,520
tapi belum tentu
jadi bencana.

1187
00:50:43,520 --> 00:50:44,460
Yah.

1188
00:50:44,460 --> 00:50:46,810
AUDIENCE: Saya pikir
bahwa sebuah [TIDAK TERDENGAR]

1189
00:50:46,810 --> 00:50:51,162
mendapatkan semua cookie
pengguna dan [TIDAK TERDENGAR].

1190
00:50:51,162 --> 00:50:51,870
PROFESOR: Benar.

1191
00:50:51,870 --> 00:50:53,367
Jadi ini ketakutanmu, yah.

1192
00:50:53,367 --> 00:50:54,950
Ini sebenarnya jauh lebih
mengkhawatirkan, sebenarnya,

1193
00:50:54,950 --> 00:50:58,000
atau memiliki dampak yang jauh lebih
tahan lama pada Anda.

1194
00:50:58,000 --> 00:51:01,536
Dan alasan ini berhasil
adalah karena browser, ketika

1195
00:51:01,536 --> 00:51:04,060
mengetahui [TIDAK TERDENGAR]
membuat sebuah keputusan

1196
00:51:04,060 --> 00:51:06,610
tentang siapa yang diizinkan untuk mendapatkan
kumpulan cookie tertentu

1197
00:51:06,610 --> 00:51:09,640
atau tidak hanya dengan melihat
nama host di URL

1198
00:51:09,640 --> 00:51:11,390
yang seharusnya
terhubung dengan Anda.

1199
00:51:11,390 --> 00:51:14,305
Jadi jika Anda terhubung ke beberapa
server web penyerang,

1200
00:51:14,305 --> 00:51:18,130
lalu Anda cukup menerima
sertifikat mereka untuk amazon.com

1201
00:51:18,130 --> 00:51:20,175
sebagai yang asli,
lalu browser

1202
00:51:20,175 --> 00:51:22,785
akan berpikir, ya, entitas yang
Saya ajak bicara adalah amazon.com,

1203
00:51:22,785 --> 00:51:25,810
jadi Saya akan memperlakukan mereka seperti Saya
ke server amazon.com normal,

1204
00:51:25,810 --> 00:51:28,345
yang berarti
mereka harus mendapatkan akses

1205
00:51:28,345 --> 00:51:31,120
ke semua cookie yang
Anda miliki untuk host tersebut.

1206
00:51:31,120 --> 00:51:33,770
Dan mungkin mereka dapat
menjalankan kode JavaScript

1207
00:51:33,770 --> 00:51:37,880
di browser Anda dengan
prinsip asal yang sama.

1208
00:51:37,880 --> 00:51:40,780
Jadi jika Anda
membuka situs lain yang

1209
00:51:40,780 --> 00:51:45,080
terhubung ke
situs web asli-- seperti mungkin

1210
00:51:45,080 --> 00:51:46,650
Anda membuka tab
di browser Anda.

1211
00:51:46,650 --> 00:51:48,400
You closed your laptop,
then you opened it

1212
00:51:48,400 --> 00:51:51,190
on a different network, all of
a sudden, someone intercepted

1213
00:51:51,190 --> 00:51:53,480
your connection to
amazon.com and injected

1214
00:51:53,480 --> 00:51:54,614
their own response.

1215
00:51:54,614 --> 00:51:56,030
If you approve it,
then they'll be

1216
00:51:56,030 --> 00:51:58,975
able to access
the old amazon.com

1217
00:51:58,975 --> 00:52:01,100
page you have open because
as far as the browser is

1218
00:52:01,100 --> 00:52:02,599
concerned, these
are the same origin

1219
00:52:02,599 --> 00:52:04,656
because they have
the same host name.

1220
00:52:04,656 --> 00:52:06,150
That's going to be troublesome.

1221
00:52:06,150 --> 00:52:09,670
So this is potentially
quite a unfortunate attack

1222
00:52:09,670 --> 00:52:11,720
if the user makes
the wrong choice

1223
00:52:11,720 --> 00:52:13,560
on approving that certificate.

1224
00:52:13,560 --> 00:52:15,430
Make sense?

1225
00:52:15,430 --> 00:52:18,430
Any questions about that?

1226
00:52:18,430 --> 00:52:19,780
All right.

1227
00:52:19,780 --> 00:52:22,480
So that's one sort of, I guess,
issue that this forced HTTPS

1228
00:52:22,480 --> 00:52:25,190
paper is worried
about is users making

1229
00:52:25,190 --> 00:52:28,870
a mistake in the decision,
users having too much leeway

1230
00:52:28,870 --> 00:52:31,850
in accepting certificates.

1231
00:52:31,850 --> 00:52:35,910
Another problem that
shows up in practice

1232
00:52:35,910 --> 00:52:39,010
is that-- we sort of
briefly talked about this--

1233
00:52:39,010 --> 00:52:41,690
but this is one of the
things that also forced

1234
00:52:41,690 --> 00:52:43,890
HTTPS, I think, is
somewhat concerned about

1235
00:52:43,890 --> 00:52:50,760
is this notion of insecure
embedding, or mixed content.

1236
00:52:50,760 --> 00:52:54,940
And the problem that
this term refers to

1237
00:52:54,940 --> 00:53:00,880
is that a secure site, or
any website for that matter,

1238
00:53:00,880 --> 00:53:04,390
can embed other pieces of
content into a web page.

1239
00:53:04,390 --> 00:53:14,020
So if you have some sort of
a site, foo.com/index.html,

1240
00:53:14,020 --> 00:53:17,870
this site might be
served from HTTPS,

1241
00:53:17,870 --> 00:53:21,420
but inside of this HTML page,
you could have many tags that

1242
00:53:21,420 --> 00:53:24,860
instruct the browser to go
and fetch other stuff as part

1243
00:53:24,860 --> 00:53:25,700
of this page.

1244
00:53:25,700 --> 00:53:27,820
So the easiest thing
to sort of think about

1245
00:53:27,820 --> 00:53:29,772
is probably script
tags where you

1246
00:53:29,772 --> 00:53:36,230
can say script source
equals http jquery.com.

1247
00:53:36,230 --> 00:53:38,620
So this is a popular
JavaScript library

1248
00:53:38,620 --> 00:53:41,330
that makes it easier to
interact with lots of stuff

1249
00:53:41,330 --> 00:53:42,250
in your browser.

1250
00:53:42,250 --> 00:53:47,150
But many web developers
just reference a URL

1251
00:53:47,150 --> 00:53:49,385
on another site like this.

1252
00:53:49,385 --> 00:53:51,010
So we should be fairly
straightforward,

1253
00:53:51,010 --> 00:53:53,790
but what's the problem
with this kind of set up?

1254
00:53:53,790 --> 00:53:58,170
Suppose you have a secure
site and you just load jQuery.

1255
00:53:58,170 --> 00:53:58,896
Yeah.

1256
00:53:58,896 --> 00:54:00,624
AUDIENCE: It could
be fake jQuery.

1257
00:54:00,624 --> 00:54:01,290
PROFESSOR: Yeah.

1258
00:54:01,290 --> 00:54:03,300
So there are actually
two ways that you

1259
00:54:03,300 --> 00:54:06,380
could get the wrong thing
that you're not expecting.

1260
00:54:06,380 --> 00:54:09,630
One possibility is that
jQuery itself is compromised.

1261
00:54:09,630 --> 00:54:12,470
So that seems like, well,
you get what you asked for.

1262
00:54:12,470 --> 00:54:14,830
You asked for this
site from jquery.com

1263
00:54:14,830 --> 00:54:16,140
and that's what you get.

1264
00:54:16,140 --> 00:54:19,070
If jQuery is compromised,
that's too bad.

1265
00:54:19,070 --> 00:54:21,220
Another problem is
that this request

1266
00:54:21,220 --> 00:54:23,960
is going to be sent without any
encryption or authentication

1267
00:54:23,960 --> 00:54:24,980
over the network.

1268
00:54:24,980 --> 00:54:29,150
So if an adversary is in control
over your network connection,

1269
00:54:29,150 --> 00:54:30,890
then they could
intercept this request

1270
00:54:30,890 --> 00:54:34,404
and serve back some other
JavaScript code in response.

1271
00:54:34,404 --> 00:54:35,820
Now, this JavaScript
code is going

1272
00:54:35,820 --> 00:54:38,480
to run as part of this page.

1273
00:54:38,480 --> 00:54:42,560
And now, because it's running
in this HTTPS foo.com domain,

1274
00:54:42,560 --> 00:54:45,630
it has access to your
secure cookies for foo.com

1275
00:54:45,630 --> 00:54:48,740
and any other stuff you have
in that page, et cetera.

1276
00:54:48,740 --> 00:54:50,920
So it seems like a
really bad thing.

1277
00:54:50,920 --> 00:54:52,482
So you should be careful not to.

1278
00:54:52,482 --> 00:54:53,940
Or a web developer
certainly should

1279
00:54:53,940 --> 00:54:57,470
be careful not to make
this kind of a mistake.

1280
00:54:57,470 --> 00:55:02,180
So one solution is to ensure
that all content embedded

1281
00:55:02,180 --> 00:55:04,340
di halaman yang aman juga aman.

1282
00:55:04,340 --> 00:55:07,055
Jadi, ini tampaknya seperti pedoman yang baik
bagi banyak pengembang web 

1283
00:55:07,055 --> 00:55:07,930
untuk diikuti.

1284
00:55:07,930 --> 00:55:12,435
Mungkin Anda sebaiknya hanya
menuliskan https titik dua jquery.com.

1285
00:55:12,435 --> 00:55:17,410
Atau ternyata URLs 
mendukung URL relatif asal

1286
00:55:17,410 --> 00:55:21,345
yang berarti Anda bisa mengabaikan 
bagian HTTPS dan hanya,

1287
00:55:21,345 --> 00:55:29,550
[TIDAK TERDENGAR] menuliskan sumber
sama dengan //jquery.com/ sesuatu.

1288
00:55:29,550 --> 00:55:33,900
Dan ini berarti
menggunakan skema URL apapun

1289
00:55:33,900 --> 00:55:35,890
yang sesuai dengan URL halaman Anda sendiri.

1290
00:55:35,890 --> 00:55:39,300
Jadi tag ini akan diterjemahkan
menjadi https jquery.com

1291
00:55:39,300 --> 00:55:42,870
Jika berada di halaman HTTPS, dan
menjadi http jquery.com biasa

1292
00:55:42,870 --> 00:55:46,940
Jika berada di halaman non-HTTPS,
hanya menggunakan URL HTTP biasa.

1293
00:55:46,940 --> 00:55:50,660
Jadi, itulah salah satu cara untuk
menghindari masalah ini.

1294
00:55:50,660 --> 00:55:54,210
Another thing that actually
recently got introduced.

1295
00:55:54,210 --> 00:55:57,280
So this field is
somewhat active.

1296
00:55:57,280 --> 00:56:00,280
People are trying to
make things better.

1297
00:56:00,280 --> 00:56:04,340
One alternative way of
dealing with this problem

1298
00:56:04,340 --> 00:56:07,560
is perhaps to include a hash or
some sort of an [? indicator ?]

1299
00:56:07,560 --> 00:56:10,720
right here in the tag, because
if you know exactly what

1300
00:56:10,720 --> 00:56:13,260
content you want to load,
maybe you don't actually

1301
00:56:13,260 --> 00:56:14,890
have to load it all over HTTPS.

1302
00:56:14,890 --> 00:56:17,740
You don't actually care who
serves it to you, as long as it

1303
00:56:17,740 --> 00:56:19,560
matches a particular hash.

1304
00:56:19,560 --> 00:56:22,890
So there's actually
a new spec out there

1305
00:56:22,890 --> 00:56:26,430
for being able to
specify basically

1306
00:56:26,430 --> 00:56:30,310
hashes in these kinds of tags.

1307
00:56:30,310 --> 00:56:34,305
So instead of having to refer
to jquery.com with an HTTPS URL,

1308
00:56:34,305 --> 00:56:35,800
maybe what you
could do is just say

1309
00:56:35,800 --> 00:56:41,020
script source equals
jquery.com, maybe even HTTP.

1310
00:56:41,020 --> 00:56:43,890
But here, you're going to
include some sort of a tag

1311
00:56:43,890 --> 00:56:47,752
attribute, like
hash equals here,

1312
00:56:47,752 --> 00:56:49,960
you're going to put in a--
let's say a shell one hash

1313
00:56:49,960 --> 00:56:52,800
or a shell two
hash of the content

1314
00:56:52,800 --> 00:56:55,020
that you're expecting to
get back from the server.

1315
00:56:55,020 --> 00:56:55,475
AUDIENCE: [INAUDIBLE].

1316
00:56:55,475 --> 00:56:56,308
PROFESSOR: Question?

1317
00:56:56,308 --> 00:56:57,920
AUDIENCE: [INAUDIBLE].

1318
00:56:57,920 --> 00:56:59,220
PROFESSOR: Ah, man.

1319
00:56:59,220 --> 00:57:01,160
There's some
complicated name for it.

1320
00:57:01,160 --> 00:57:04,070
I have the URL, actually, in the
lecture notes, so [INAUDIBLE].

1321
00:57:07,480 --> 00:57:11,590
Subresource integrity
or something like this.

1322
00:57:11,590 --> 00:57:14,280
I can actually slowly
be-- well, hopefully

1323
00:57:14,280 --> 00:57:18,380
will be deployed probably
soon in various browsers.

1324
00:57:18,380 --> 00:57:21,840
Feels like another way to
actually authenticate content

1325
00:57:21,840 --> 00:57:26,980
without relying on data, or data
encryption of the [INAUDIBLE].

1326
00:57:26,980 --> 00:57:29,170
So here, we have this
very generic plan

1327
00:57:29,170 --> 00:57:31,970
using SSL and TLS to
authenticate connections

1328
00:57:31,970 --> 00:57:33,317
to particular servers.

1329
00:57:33,317 --> 00:57:34,900
This is almost like
an alternative way

1330
00:57:34,900 --> 00:57:39,160
of thinking of sort of securing
your network communication.

1331
00:57:39,160 --> 00:57:41,530
If the thing you just
care about is integrity,

1332
00:57:41,530 --> 00:57:43,890
then maybe you don't need
a secure, encrypted channel

1333
00:57:43,890 --> 00:57:44,630
over the network.

1334
00:57:44,630 --> 00:57:47,048
All you need is to
specify exactly what you

1335
00:57:47,048 --> 00:57:48,173
want at the end of the day.

1336
00:57:48,173 --> 00:57:48,672
Yeah.

1337
00:57:48,672 --> 00:57:51,280
AUDIENCE: So doesn't
this [INAUDIBLE]?

1338
00:57:51,280 --> 00:57:53,620
PROFESSOR: Doesn't this
code sit at the client?

1339
00:57:53,620 --> 00:57:57,030
Well, it runs at the client,
but the client fetches this code

1340
00:57:57,030 --> 00:57:58,450
from some server.

1341
00:57:58,450 --> 00:57:59,390
AUDIENCE: [INAUDIBLE].

1342
00:57:59,390 --> 00:58:02,384
Can't anybody just [INAUDIBLE]?

1343
00:58:02,384 --> 00:58:03,050
PROFESSOR: Yeah.

1344
00:58:03,050 --> 00:58:06,280
So I think the
point of the hash is

1345
00:58:06,280 --> 00:58:13,060
to protect the containing page
from attackers that injected

1346
00:58:13,060 --> 00:58:14,930
different JavaScript code here.

1347
00:58:14,930 --> 00:58:16,690
So for jQuery, this
makes a lot of sense

1348
00:58:16,690 --> 00:58:18,310
because jQuery is well known.

1349
00:58:18,310 --> 00:58:20,819
You're not trying to hide
what jQuery source code is.

1350
00:58:20,819 --> 00:58:23,110
Well, what you do want to
make sure is that the network

1351
00:58:23,110 --> 00:58:25,880
attacker cannot intercept
your connection and supply

1352
00:58:25,880 --> 00:58:28,244
a malicious version of
jQuery that's going to leak

1353
00:58:28,244 --> 00:58:28,785
your cookies.

1354
00:58:28,785 --> 00:58:30,690
AUDIENCE: [? Oh, ?] OK.

1355
00:58:30,690 --> 00:58:32,150
PROFESSOR: That make sense?

1356
00:58:32,150 --> 00:58:33,820
It's absolutely true that
anyone can compute the hash

1357
00:58:33,820 --> 00:58:35,111
of these things for themselves.

1358
00:58:38,240 --> 00:58:41,026
So this is a solution
for integrity problems,

1359
00:58:41,026 --> 00:58:42,025
not for confidentiality.

1360
00:58:45,340 --> 00:58:46,770
All right.

1361
00:58:46,770 --> 00:58:51,450
So this is sort of what I guess
developers have to watch out

1362
00:58:51,450 --> 00:58:58,680
for when writing pages, or
including content in their HTML

1363
00:58:58,680 --> 00:59:01,330
pages on a HTTPS URL.

1364
00:59:01,330 --> 00:59:05,230
Another worrisome problem
is dealing with cookies.

1365
00:59:05,230 --> 00:59:12,130
And here's where this difference
between secure flags and just

1366
00:59:12,130 --> 00:59:15,410
origins comes into play.

1367
00:59:15,410 --> 00:59:17,860
So one thing, of course,
the developer could screw up

1368
00:59:17,860 --> 00:59:20,430
is maybe they just forget
to set the secure flag

1369
00:59:20,430 --> 00:59:23,150
on a cookie in the first place.

1370
00:59:23,150 --> 00:59:24,170
This happens.

1371
00:59:24,170 --> 00:59:29,950
Maybe you're thinking my users
only ever go to the HTTPS URL.

1372
00:59:29,950 --> 00:59:31,350
My cookies are
never [INAUDIBLE].

1373
00:59:31,350 --> 00:59:32,950
Why should I set the
secure flag on the cookie?

1374
00:59:32,950 --> 00:59:33,880
And they might
[? also have the ?]

1375
00:59:33,880 --> 00:59:35,970
secure flag, or maybe
they just forget about it.

1376
00:59:35,970 --> 00:59:38,837
Is this a problem?

1377
00:59:38,837 --> 00:59:40,420
What if your users
are super diligent?

1378
00:59:40,420 --> 00:59:43,260
They always visit the
HTTPS URL, and you don't

1379
00:59:43,260 --> 00:59:44,655
have any problems like this.

1380
00:59:44,655 --> 00:59:47,540
Do you still leave the
secure flag on your cookies?

1381
00:59:47,540 --> 00:59:48,040
[INAUDIBLE]

1382
00:59:51,180 --> 00:59:52,140
Yeah.

1383
00:59:52,140 --> 00:59:53,580
AUDIENCE: Could the
attacker connect to your URL

1384
00:59:53,580 --> 00:59:55,020
and redirect you
to a [INAUDIBLE]?

1385
00:59:55,020 --> 00:59:55,686
PROFESSOR: Yeah.

1386
00:59:55,686 --> 00:59:59,110
So even if the user doesn't
explicitly, manually

1387
00:59:59,110 --> 01:00:02,620
go to some plain text URL, the
attacker could give you a link,

1388
01:00:02,620 --> 01:00:06,834
or maybe ask you to load an
image from a non-HTTPS URL.

1389
01:00:06,834 --> 01:00:08,250
And then non-secure
cookie is just

1390
01:00:08,250 --> 01:00:10,250
going to be sent along
with the network request.

1391
01:00:10,250 --> 01:00:11,833
So that seems like
a bit of a problem.

1392
01:00:11,833 --> 01:00:13,560
So you really do
need the secure flag,

1393
01:00:13,560 --> 01:00:15,934
even if your users and your
application is super careful.

1394
01:00:15,934 --> 01:00:17,967
AUDIENCE: But I'm
assuming there's

1395
01:00:17,967 --> 01:00:19,668
an HTTP URL [INAUDIBLE].

1396
01:00:23,070 --> 01:00:24,320
PROFESSOR: That's right, yeah.

1397
01:00:24,320 --> 01:00:26,319
So again, so how could
this [? break? ?] Suppose

1398
01:00:26,319 --> 01:00:27,150
I have a site.

1399
01:00:27,150 --> 01:00:28,810
It doesn't even
listen on port 80.

1400
01:00:28,810 --> 01:00:31,560
There's no way to
connect to me on port 80,

1401
01:00:31,560 --> 01:00:34,218
so why is it a problem if
I have a non-secure cookie?

1402
01:00:34,218 --> 01:00:36,009
AUDIENCE: Because the
browser wouldn't have

1403
01:00:36,009 --> 01:00:38,000
cookies for another domain.

1404
01:00:38,000 --> 01:00:39,000
PROFESSOR: That's right.

1405
01:00:39,000 --> 01:00:40,666
So the browser wouldn't
send your cookie

1406
01:00:40,666 --> 01:00:43,660
to a different domain,
but yet it still

1407
01:00:43,660 --> 01:00:46,740
seems worrisome that an
attacker might load a URL.

1408
01:00:46,740 --> 01:00:50,842
So suppose that amazon.com only
ever served stuff over SSL.

1409
01:00:50,842 --> 01:00:52,300
It's not even
listening on port 80.

1410
01:00:52,300 --> 01:00:54,060
There's no way to connect it.

1411
01:00:54,060 --> 01:00:57,080
So in this case,
and as a result,

1412
01:00:57,080 --> 01:00:59,666
they don't set their
secure flag on a cookie.

1413
01:00:59,666 --> 01:01:01,540
So how could a hacker
then steal their cookie

1414
01:01:01,540 --> 01:01:04,546
if Amazon isn't even
listening at port 80?

1415
01:01:04,546 --> 01:01:05,426
Yeah.

1416
01:01:05,426 --> 01:01:07,050
AUDIENCE: Can't the
browser still think

1417
01:01:07,050 --> 01:01:09,340
it's an HTTP connection?

1418
01:01:09,340 --> 01:01:11,100
PROFESSOR: Well, so
if you connect to port

1419
01:01:11,100 --> 01:01:14,424
443 and you speak SSL
or GLS, then it's always

1420
01:01:14,424 --> 01:01:15,340
going to be encrypted.

1421
01:01:15,340 --> 01:01:16,697
So that's not a problem.

1422
01:01:16,697 --> 01:01:17,671
Yeah.

1423
01:01:17,671 --> 01:01:20,964
AUDIENCE: The attacker can
[INAUDIBLE] their network.

1424
01:01:20,964 --> 01:01:21,630
PROFESSOR: Yeah.

1425
01:01:21,630 --> 01:01:24,350
So the attacker can actually
intercept your packets

1426
01:01:24,350 --> 01:01:26,960
that are trying to connect
to Amazon on port 80

1427
01:01:26,960 --> 01:01:28,960
and then appear, and make
it appear, like you've

1428
01:01:28,960 --> 01:01:30,720
connected successfully.

1429
01:01:30,720 --> 01:01:33,510
So if the attacker has
control over your network,

1430
01:01:33,510 --> 01:01:35,760
they could redirect
your packets trying

1431
01:01:35,760 --> 01:01:37,970
to get to Amazon to their
own machine on port 80.

1432
01:01:37,970 --> 01:01:39,290
They're going to
accept the connection,

1433
01:01:39,290 --> 01:01:41,831
and the client isn't going to
be able to know the difference.

1434
01:01:41,831 --> 01:01:44,030
It will be as if Amazon
is listening on port 80,

1435
01:01:44,030 --> 01:01:46,931
and then your cookies will be
sent to this adversary's web

1436
01:01:46,931 --> 01:01:47,430
server.

1437
01:01:47,430 --> 01:01:49,246
AUDIENCE: Because the
client is unknown.

1438
01:01:49,246 --> 01:01:49,810
PROFESSOR: That's right.

1439
01:01:49,810 --> 01:01:51,380
Yeah, so for HTTP,
there's no way

1440
01:01:51,380 --> 01:01:53,420
to authenticate the host
you're connected to.

1441
01:01:53,420 --> 01:01:54,950
This is exactly what's going on.

1442
01:01:54,950 --> 01:01:57,980
HTTP has no authentication,
and as a result,

1443
01:01:57,980 --> 01:01:59,950
you have to prevent
the cookies from being

1444
01:01:59,950 --> 01:02:01,730
sent over HTTP in
the first place

1445
01:02:01,730 --> 01:02:05,320
because you have no idea
who that HTTP connection is

1446
01:02:05,320 --> 01:02:08,066
going to go to if you're
assuming a network adversary.

1447
01:02:08,066 --> 01:02:10,624
AUDIENCE: So you need
network control to do this.

1448
01:02:10,624 --> 01:02:11,540
PROFESSOR: Well, yeah.

1449
01:02:11,540 --> 01:02:13,560
So either you have full
control over your network

1450
01:02:13,560 --> 01:02:15,518
so you know that adversaries
aren't going to be

1451
01:02:15,518 --> 01:02:16,860
able to intercept your packets.

1452
01:02:16,860 --> 01:02:18,610
But even then, it's
actually not so great.

1453
01:02:18,610 --> 01:02:20,580
Like look at the TCP lecture.

1454
01:02:20,580 --> 01:02:23,716
You can do all kinds of sequence
number of attacks and so on.

1455
01:02:23,716 --> 01:02:25,700
[? That's going to be ?]
troublesome.

1456
01:02:25,700 --> 01:02:26,450
All right.

1457
01:02:26,450 --> 01:02:28,233
Any more questions about that?

1458
01:02:28,233 --> 01:02:28,732
Yeah.

1459
01:02:28,732 --> 01:02:30,130
AUDIENCE: I'm sorry, but
isn't the attack intercepted

1460
01:02:30,130 --> 01:02:30,671
in that case?

1461
01:02:30,671 --> 01:02:31,917
Is there like a redirect?

1462
01:02:31,917 --> 01:02:33,750
PROFESSOR: Well, what
that hacker presumably

1463
01:02:33,750 --> 01:02:36,860
would intercept is an HTTP
request from the client going

1464
01:02:36,860 --> 01:02:40,939
to http amazon.com, and
that request includes

1465
01:02:40,939 --> 01:02:43,397
all your amazon.com cookies,
or cookies for whatever domain

1466
01:02:43,397 --> 01:02:45,210
it is that you're
sending your request to.

1467
01:02:45,210 --> 01:02:47,084
So if you don't mark
those cookies as secure,

1468
01:02:47,084 --> 01:02:49,240
there will be set of both
encrypted and unencrypted

1469
01:02:49,240 --> 01:02:49,740
connections.

1470
01:02:49,740 --> 01:02:51,810
AUDIENCE: So how does that
request get initiated?

1471
01:02:51,810 --> 01:02:52,600
PROFESSOR: Ah, OK.

1472
01:02:52,600 --> 01:02:53,100
Yeah.

1473
01:02:53,100 --> 01:02:55,360
So maybe you get the user
to visit newyorktimes.com

1474
01:02:55,360 --> 01:02:58,260
and you pay for an advertisement
that loads an image

1475
01:02:58,260 --> 01:03:01,194
from http colon amazon.com.

1476
01:03:01,194 --> 01:03:02,980
And there's nothing
preventing you

1477
01:03:02,980 --> 01:03:05,120
from saying, please load
an image from this URL.

1478
01:03:05,120 --> 01:03:06,950
But when a browser
tries to connect there,

1479
01:03:06,950 --> 01:03:09,858
it'll send the cookies if
the connection succeeds.

1480
01:03:09,858 --> 01:03:10,854
Question back there.

1481
01:03:10,854 --> 01:03:14,174
AUDIENCE: Will it ask
for a change [INAUDIBLE]?

1482
01:03:14,174 --> 01:03:14,840
PROFESSOR: Yeah.

1483
01:03:14,840 --> 01:03:16,890
So HTTPS everywhere
is an extension

1484
01:03:16,890 --> 01:03:20,040
that is very similar to
forced HTTPS in some ways,

1485
01:03:20,040 --> 01:03:24,720
and it tries to prevent
these kinds of mistakes.

1486
01:03:24,720 --> 01:03:28,380
So I guess one thing
that forced HTTP does

1487
01:03:28,380 --> 01:03:31,760
is they worry about
such mistakes.

1488
01:03:31,760 --> 01:03:36,410
And when you sort of opted a
site into this forced HTTPS

1489
01:03:36,410 --> 01:03:39,560
plan, one thing that the
browser will do for you

1490
01:03:39,560 --> 01:03:43,270
is prevent any HTTPS
connections to that host

1491
01:03:43,270 --> 01:03:44,560
in the first place.

1492
01:03:44,560 --> 01:03:47,250
So there's no way to make
this kind of mistakes

1493
01:03:47,250 --> 01:03:50,580
of not flagging your
cookie as secure,

1494
01:03:50,580 --> 01:03:54,340
or having other sort of kinds
of cookie problems as well.

1495
01:03:54,340 --> 01:03:57,430
Another more subtle
problem-- so this,

1496
01:03:57,430 --> 01:03:58,930
the problem we
talked about just now

1497
01:03:58,930 --> 01:04:00,430
is the developer
forgetting to set

1498
01:04:00,430 --> 01:04:01,974
the secure flag on a cookie.

1499
01:04:01,974 --> 01:04:02,890
So that seems fixable.

1500
01:04:02,890 --> 01:04:04,639
OK, maybe the developer
should just do it.

1501
01:04:04,639 --> 01:04:05,690
OK, fix that problem.

1502
01:04:05,690 --> 01:04:07,270
The thing that's
much more subtle

1503
01:04:07,270 --> 01:04:11,030
is that when a secure web
server gets a cookie back

1504
01:04:11,030 --> 01:04:13,990
from the client, it actually has
no idea whether this cookie was

1505
01:04:13,990 --> 01:04:17,020
sent through an encrypted
connection or a plain text

1506
01:04:17,020 --> 01:04:19,819
connection because
when the server gets

1507
01:04:19,819 --> 01:04:21,360
a cookie from the
client, all it gets

1508
01:04:21,360 --> 01:04:24,200
is the key value
pair for a cookie.

1509
01:04:24,200 --> 01:04:28,650
And as we sort of look at here,
the plan for the [INAUDIBLE]

1510
01:04:28,650 --> 01:04:31,530
follows is that it'll include
both secure and insecure

1511
01:04:31,530 --> 01:04:35,050
cookies when it's sending a
request to a secure server,

1512
01:04:35,050 --> 01:04:36,850
because the browser
here was just

1513
01:04:36,850 --> 01:04:39,650
concerned about the
confidentiality of cookies.

1514
01:04:39,650 --> 01:04:42,030
But on the server
side, you now don't

1515
01:04:42,030 --> 01:04:43,280
have any integrity guarantees.

1516
01:04:43,280 --> 01:04:44,762
When you get a
cookie from a user,

1517
01:04:44,762 --> 01:04:46,970
it might have been sent over
an encrypted connection,

1518
01:04:46,970 --> 01:04:50,370
but it also might have been sent
over a plain text connection.

1519
01:04:50,370 --> 01:04:53,390
So this leads to somewhat
more subtle attacks,

1520
01:04:53,390 --> 01:04:55,670
but the flavor of
these attacks tend

1521
01:04:55,670 --> 01:04:57,370
to be things like
session fixation.

1522
01:04:57,370 --> 01:05:01,840
What it means is that suppose I
want to see what emails you're

1523
01:05:01,840 --> 01:05:02,490
sending.

1524
01:05:02,490 --> 01:05:05,130
Or maybe I'll set a
cookie for you that

1525
01:05:05,130 --> 01:05:06,850
is a copy of my Gmail, cookie.

1526
01:05:06,850 --> 01:05:08,760
So when you go to compose
a message in Gmail,

1527
01:05:08,760 --> 01:05:11,700
it'll actually be saved in
my sent folder inside of your

1528
01:05:11,700 --> 01:05:12,531
sent folder.

1529
01:05:12,531 --> 01:05:14,155
It'll be as if you're
using my account,

1530
01:05:14,155 --> 01:05:16,280
and then I'll be able to
extract things from there.

1531
01:05:16,280 --> 01:05:20,610
So if I can force a session
cookie into your browser

1532
01:05:20,610 --> 01:05:22,260
and sort of get you
to use my account,

1533
01:05:22,260 --> 01:05:24,340
maybe I can extract some
information that way

1534
01:05:24,340 --> 01:05:27,170
from the victim.

1535
01:05:27,170 --> 01:05:32,290
So that's another problem that
arises because of this grey

1536
01:05:32,290 --> 01:05:36,060
area [INAUDIBLE] incomplete
separation between HTTP

1537
01:05:36,060 --> 01:05:37,523
and HTTPS cookies.

1538
01:05:37,523 --> 01:05:38,022
Question.

1539
01:05:38,022 --> 01:05:40,313
AUDIENCE: So you would need
a [INAUDIBLE] vulnerability

1540
01:05:40,313 --> 01:05:41,670
to set that cookie [INAUDIBLE].

1541
01:05:41,670 --> 01:05:43,419
PROFESSOR: No.
[INAUDIBLE] vulnerability

1542
01:05:43,419 --> 01:05:44,210
to set this cookie.

1543
01:05:44,210 --> 01:05:46,210
You would just trick the
browser into connecting

1544
01:05:46,210 --> 01:05:49,460
to a regular HTTP host URL.

1545
01:05:49,460 --> 01:05:53,440
And without some extension
like forced HTTPS or HTTPS

1546
01:05:53,440 --> 01:05:56,730
everywhere, you could
then, as an adversary,

1547
01:05:56,730 --> 01:05:59,680
set up a key in
the user's browser.

1548
01:05:59,680 --> 01:06:01,470
It's a non-secure
cookie, but it's

1549
01:06:01,470 --> 01:06:03,555
going to be sent back,
even on secure requests.

1550
01:06:03,555 --> 01:06:06,013
AUDIENCE: So do you have to
trick the browser into thinking

1551
01:06:06,013 --> 01:06:07,650
the domain is the same domain?

1552
01:06:07,650 --> 01:06:08,070
PROFESSOR: That's right.

1553
01:06:08,070 --> 01:06:08,240
Yeah.

1554
01:06:08,240 --> 01:06:09,910
So you have to intercept
their network connection

1555
01:06:09,910 --> 01:06:11,280
and probably do the
same kind of attack

1556
01:06:11,280 --> 01:06:13,446
you were talking about just
a couple of minutes ago.

1557
01:06:13,446 --> 01:06:14,090
Yeah.

1558
01:06:14,090 --> 01:06:15,970
Make sense?

1559
01:06:15,970 --> 01:06:17,390
All right.

1560
01:06:17,390 --> 01:06:20,390
So I guess there's
probably [INAUDIBLE].

1561
01:06:20,390 --> 01:06:23,130
So what does forced HTTPS
actually do for us now?

1562
01:06:23,130 --> 01:06:27,100
It tries to prevent some
subset of these problems.

1563
01:06:27,100 --> 01:06:29,680
So I guess I should say, so
forced HTTPS, the paper we read

1564
01:06:29,680 --> 01:06:31,930
was sort of a
research proposal that

1565
01:06:31,930 --> 01:06:35,539
was published I guess
five or six years ago now.

1566
01:06:35,539 --> 01:06:37,330
Since then, it's actually
been standardized

1567
01:06:37,330 --> 01:06:38,560
and actually adopted.

1568
01:06:38,560 --> 01:06:42,410
So this was like a somewhat
sketchy plug-in that

1569
01:06:42,410 --> 01:06:43,665
stored stuff and some cookies.

1570
01:06:43,665 --> 01:06:46,620
Are they worried about
getting evicted and so on?

1571
01:06:46,620 --> 01:06:48,770
Now actually, most
browsers look at this paper

1572
01:06:48,770 --> 01:06:49,710
and say, OK, this
is a great idea.

1573
01:06:49,710 --> 01:06:51,126
We'll actually
implement it better

1574
01:06:51,126 --> 01:06:52,350
within the browser itself.

1575
01:06:52,350 --> 01:06:55,970
So there's something called HTTP
strict transport security that

1576
01:06:55,970 --> 01:06:58,199
implements most of the
ideas from forced HTTPS

1577
01:06:58,199 --> 01:06:59,490
and actually make a good story.

1578
01:06:59,490 --> 01:07:03,565
Like, here's how research
actually makes an impact on I

1579
01:07:03,565 --> 01:07:07,100
guess security of web
applications and browsers.

1580
01:07:07,100 --> 01:07:08,970
But anyway, let's look
at what forced HTTPS

1581
01:07:08,970 --> 01:07:10,980
does for a website.

1582
01:07:10,980 --> 01:07:15,220
So forced HTTPS allows a
website to set this bit

1583
01:07:15,220 --> 01:07:17,380
for a particular host name.

1584
01:07:17,380 --> 01:07:21,005
And the way that forced
HTTPS changes the behavior

1585
01:07:21,005 --> 01:07:24,242
of the browser is threefold.

1586
01:07:24,242 --> 01:07:28,760
So if some website
sets forced HTTPS,

1587
01:07:28,760 --> 01:07:32,300
then there's sort of three
things that happen differently.

1588
01:07:32,300 --> 01:07:39,110
So any certificate
errors are always fatal.

1589
01:07:39,110 --> 01:07:41,405
So the user doesn't
have a chance

1590
01:07:41,405 --> 01:07:45,780
of accepting incorrect
certificate that

1591
01:07:45,780 --> 01:07:49,530
has a wrong host name, or an
expiration time that's passed,

1592
01:07:49,530 --> 01:07:50,480
et cetera.

1593
01:07:50,480 --> 01:07:52,810
So it's one thing that
the browser now changes.

1594
01:07:52,810 --> 01:08:01,130
Another is that it redirects
all HTTP requests to HTTPS.

1595
01:08:01,130 --> 01:08:02,840
So this is a pretty good idea.

1596
01:08:02,840 --> 01:08:08,590
If you know a site is always
using HTTPS legitimately,

1597
01:08:08,590 --> 01:08:10,852
then you should probably
prohibit any regular HTTP

1598
01:08:10,852 --> 01:08:12,810
requests [? website ?],
because that's probably

1599
01:08:12,810 --> 01:08:15,110
a sign of some mistake
or attacker trying

1600
01:08:15,110 --> 01:08:17,830
to trick you into connecting
to a site without encryption.

1601
01:08:17,830 --> 01:08:20,080
You want to make sure this
actually happens before you

1602
01:08:20,080 --> 01:08:22,080
issue the HTTP request.

1603
01:08:22,080 --> 01:08:24,740
Otherwise, the HTTP request
has already sort of sailed

1604
01:08:24,740 --> 01:08:26,630
onto the network.

1605
01:08:26,630 --> 01:08:32,140
And the last thing that this
forced HTTPS setting changes is

1606
01:08:32,140 --> 01:08:37,740
that it actually prohibits
this insecure embedding

1607
01:08:37,740 --> 01:08:43,910
plan that we looked
at below here

1608
01:08:43,910 --> 01:08:50,149
when you're including a
HTTP URL in an HTTPS site.

1609
01:08:50,149 --> 01:08:51,070
Make sense?

1610
01:08:51,070 --> 01:08:55,319
So this is what the forced
HTTPS sort of extension did.

1611
01:08:55,319 --> 01:08:57,620
In terms of what's
going on now is

1612
01:08:57,620 --> 01:09:03,180
that well, so this HTTPS
strict transport security HSTS

1613
01:09:03,180 --> 01:09:06,870
protocol basically
does the same things.

1614
01:09:06,870 --> 01:09:09,969
Most browsers now prohibit
insecure embedding by default.

1615
01:09:09,969 --> 01:09:12,109
So this used to be a
little controversial

1616
01:09:12,109 --> 01:09:14,970
because many developers
have trouble with this.

1617
01:09:14,970 --> 01:09:20,590
But I think Firefox and Chrome
and IE all now by default

1618
01:09:20,590 --> 01:09:23,529
will refuse to load
insecure components,

1619
01:09:23,529 --> 01:09:27,649
or at least secure JavaScript
and CSS, into our page

1620
01:09:27,649 --> 01:09:29,051
unless you do something.

1621
01:09:29,051 --> 01:09:29,550
Question.

1622
01:09:29,550 --> 01:09:31,284
AUDIENCE: Don't they
prompt the user?

1623
01:09:31,284 --> 01:09:33,700
PROFESSOR: They used to, and
the user would just say, yes.

1624
01:09:33,700 --> 01:09:36,262
So IE, for example, used to
pop up this dialogue box,

1625
01:09:36,262 --> 01:09:37,720
and this paper
talks about, saying,

1626
01:09:37,720 --> 01:09:40,560
would you like to load
some extra content,

1627
01:09:40,560 --> 01:09:42,517
or something like that.

1628
01:09:42,517 --> 01:09:44,413
AUDIENCE: [INAUDIBLE]
because [INAUDIBLE].

1629
01:09:44,413 --> 01:09:45,079
PROFESSOR: Yeah.

1630
01:09:45,079 --> 01:09:47,500
I think if you try to
pretend to be clever,

1631
01:09:47,500 --> 01:09:50,520
then you can bypass all
these security mechanisms.

1632
01:09:50,520 --> 01:09:53,220
But don't try to
be clever this way.

1633
01:09:53,220 --> 01:09:55,770
So this is mostly a
non-problem in modern browsers,

1634
01:09:55,770 --> 01:09:58,140
but these two things
are still things

1635
01:09:58,140 --> 01:10:01,510
that forced HTTPS and HTTP
strict transport security

1636
01:10:01,510 --> 01:10:02,993
provide and are useful.

1637
01:10:02,993 --> 01:10:03,493
Yeah.

1638
01:10:03,493 --> 01:10:05,284
AUDIENCE: What happens
when a website can't

1639
01:10:05,284 --> 01:10:08,895
support HTTPS? [INAUDIBLE]
change their [INAUDIBLE]?

1640
01:10:08,895 --> 01:10:11,020
PROFESSOR: So what do you
mean can't support HTTPS?

1641
01:10:11,020 --> 01:10:12,457
AUDIENCE: [INAUDIBLE].

1642
01:10:12,457 --> 01:10:13,290
PROFESSOR: Well, OK.

1643
01:10:13,290 --> 01:10:16,330
So if you have a website
that doesn't support HTTPS

1644
01:10:16,330 --> 01:10:19,116
but sets this
cookie, what happens?

1645
01:10:19,116 --> 01:10:20,068
AUDIENCE: [INAUDIBLE].

1646
01:10:20,068 --> 01:10:21,020
PROFESSOR: Yeah.

1647
01:10:21,020 --> 01:10:22,790
So this is the reason
why it's an option.

1648
01:10:22,790 --> 01:10:25,640
So if you opted everyone, then
you're exactly in this boat.

1649
01:10:25,640 --> 01:10:28,140
Like, oh, all of a sudden, you
can't talk to most of the web

1650
01:10:28,140 --> 01:10:29,775
because they don't use HTTPS.

1651
01:10:29,775 --> 01:10:31,900
So you really wanted this
to be selectively enabled

1652
01:10:31,900 --> 01:10:34,974
for sites that really want
this kind of protection.

1653
01:10:34,974 --> 01:10:35,474
Yeah.

1654
01:10:35,474 --> 01:10:36,950
AUDIENCE: But also, if
I remember correctly,

1655
01:10:36,950 --> 01:10:39,270
you can't set the cookie
unless the site [INAUDIBLE].

1656
01:10:39,270 --> 01:10:39,650
PROFESSOR: That's right, yeah.

1657
01:10:39,650 --> 01:10:41,441
So these guys are also
worried about denial

1658
01:10:41,441 --> 01:10:44,050
of service attacks,
where this plug in

1659
01:10:44,050 --> 01:10:47,300
could be used to cause
trouble for other sites.

1660
01:10:47,300 --> 01:10:49,980
So if you, for example,
set this forced HTTPS

1661
01:10:49,980 --> 01:10:55,400
bit for some unsuspecting
website, then all of a sudden,

1662
01:10:55,400 --> 01:10:57,920
the website stops working
because everyone is now

1663
01:10:57,920 --> 01:10:59,570
trying to connect
to them over HTTPS,

1664
01:10:59,570 --> 01:11:00,890
and they don't support HTTPS.

1665
01:11:00,890 --> 01:11:04,779
So this is one example
of worrying about denial

1666
01:11:04,779 --> 01:11:05,570
of service attacks.

1667
01:11:05,570 --> 01:11:07,810
Another thing is
that they actually

1668
01:11:07,810 --> 01:11:12,120
don't support setting forced
HTTPS for an entire domain.

1669
01:11:12,120 --> 01:11:15,900
So they worried that, for
example, at mit.edu, I

1670
01:11:15,900 --> 01:11:17,430
am a user at mit.edu.

1671
01:11:17,430 --> 01:11:20,150
Maybe I'll set a forced HTTPS
cookie for start.mit.edu

1672
01:11:20,150 --> 01:11:21,770
in everyone's browsers.

1673
01:11:21,770 --> 01:11:25,330
And now, only HTTPS
things work at MIT.

1674
01:11:25,330 --> 01:11:27,510
That seems also a
little disastrous,

1675
01:11:27,510 --> 01:11:29,592
so you probably
want to avoid that.

1676
01:11:29,592 --> 01:11:32,730
On the other hand, actually,
HTTPS strict transfer security

1677
01:11:32,730 --> 01:11:34,580
went back on this
and said, well, we'll

1678
01:11:34,580 --> 01:11:38,930
allow this notion of forcing
HTTPS for an entire subdomain

1679
01:11:38,930 --> 01:11:42,120
because it turns out
to be useful because

1680
01:11:42,120 --> 01:11:44,595
of these insecure cookies
being sent along with a request

1681
01:11:44,595 --> 01:11:48,250
that you can't tell where
they were sent from initially.

1682
01:11:48,250 --> 01:11:50,850
Anyway, so there's all
kinds of subtle interactions

1683
01:11:50,850 --> 01:11:52,280
with teachers at
the lowest level,

1684
01:11:52,280 --> 01:11:57,320
but it's not clear what
the right choice is.

1685
01:11:57,320 --> 01:11:59,570
OK, so one actually interesting
question you might ask

1686
01:11:59,570 --> 01:12:05,040
is are these fundamental
to the system we

1687
01:12:05,040 --> 01:12:07,850
have, or are these mostly
just helping developers avoid

1688
01:12:07,850 --> 01:12:09,040
mistakes?

1689
01:12:09,040 --> 01:12:12,000
So suppose you had a
developer that's very diligent

1690
01:12:12,000 --> 01:12:14,820
and doesn't do insecure
[INAUDIBLE] embedding,

1691
01:12:14,820 --> 01:12:16,230
doesn't solve any
other problems,

1692
01:12:16,230 --> 01:12:18,640
always gets their
certificates renewed,

1693
01:12:18,640 --> 01:12:22,511
should they bother with
forced HTTPS or not?

1694
01:12:22,511 --> 01:12:23,010
Yeah.

1695
01:12:23,010 --> 01:12:23,885
AUDIENCE: Well, yeah.

1696
01:12:23,885 --> 01:12:27,920
You still have the problem with
someone forcing HTTP protocol.

1697
01:12:27,920 --> 01:12:30,502
Nothing stops the
hacker from doing

1698
01:12:30,502 --> 01:12:32,294
[? excessive ?]
[INAUDIBLE] forces the user

1699
01:12:32,294 --> 01:12:33,793
to load something
over HTTP and then

1700
01:12:33,793 --> 01:12:35,140
to intercept the connection.

1701
01:12:35,140 --> 01:12:38,130
PROFESSOR: That's true, but if
you feel they're very diligent

1702
01:12:38,130 --> 01:12:40,140
and all their cookies
are marked secure,

1703
01:12:40,140 --> 01:12:43,542
then having someone visit an
HTTP version of your site,

1704
01:12:43,542 --> 01:12:44,500
shouldn't be a problem.

1705
01:12:44,500 --> 01:12:46,364
AUDIENCE: [INAUDIBLE].

1706
01:12:46,364 --> 01:12:47,030
PROFESSOR: Yeah.

1707
01:12:47,030 --> 01:12:49,530
So you'd probably have to
defend against cookie overwrite

1708
01:12:49,530 --> 01:12:51,860
or injection attacks, and
that's sort of doable.

1709
01:12:51,860 --> 01:12:55,089
It's a little tedious, but
you can probably do something.

1710
01:12:55,089 --> 01:12:55,714
AUDIENCE: Yeah.

1711
01:12:55,714 --> 01:12:58,488
I think her point is that
also, it didn't-- security

1712
01:12:58,488 --> 01:13:00,474
didn't check the
certificate, right?

1713
01:13:00,474 --> 01:13:01,140
PROFESSOR: Yeah.

1714
01:13:01,140 --> 01:13:01,723
So that's one.

1715
01:13:01,723 --> 01:13:03,830
I think that this
is the biggest thing

1716
01:13:03,830 --> 01:13:06,290
is this first point, which
is that everything else,

1717
01:13:06,290 --> 01:13:08,970
you can sort of defend it
against by cleverly coding

1718
01:13:08,970 --> 01:13:10,780
or being careful in
your application.

1719
01:13:10,780 --> 01:13:12,740
The first thing is
something that the user

1720
01:13:12,740 --> 01:13:14,742
has-- or the developer--
has no control

1721
01:13:14,742 --> 01:13:17,200
over because the developer
wants to make sure, for example,

1722
01:13:17,200 --> 01:13:20,375
that their cookie will only
be sent to their server as

1723
01:13:20,375 --> 01:13:22,180
signed by this CA.

1724
01:13:22,180 --> 01:13:25,227
And if the user is allowed
to randomly say, oh,

1725
01:13:25,227 --> 01:13:26,810
that's good enough,
then the developer

1726
01:13:26,810 --> 01:13:28,393
has no clue where
their cookie's going

1727
01:13:28,393 --> 01:13:30,970
to end up because some
user is going to leak it

1728
01:13:30,970 --> 01:13:33,420
to some incorrect server.

1729
01:13:33,420 --> 01:13:35,737
So this is, I think, the main
benefit of this protocol.

1730
01:13:35,737 --> 01:13:36,570
Question back there.

1731
01:13:36,570 --> 01:13:38,001
AUDIENCE: [INAUDIBLE]
second point

1732
01:13:38,001 --> 01:13:40,863
is also vital because the
user might not [INAUDIBLE].

1733
01:13:40,863 --> 01:13:43,407
You might [INAUDIBLE]
of the site, which

1734
01:13:43,407 --> 01:13:44,679
would be right in the middle.

1735
01:13:44,679 --> 01:13:45,156
PROFESSOR: I see.

1736
01:13:45,156 --> 01:13:45,656
OK.

1737
01:13:45,656 --> 01:13:47,970
So I agree in the
sense that this

1738
01:13:47,970 --> 01:13:52,060
is very useful from the
point of view of UI security

1739
01:13:52,060 --> 01:13:55,349
because as far as the
cookies are concerned,

1740
01:13:55,349 --> 01:13:57,140
the developer can
probably be clever enough

1741
01:13:57,140 --> 01:13:58,570
to do something sensible.

1742
01:13:58,570 --> 01:14:01,510
But the user might not
be diligently looking

1743
01:14:01,510 --> 01:14:04,650
at that lock icon
and URL at all times.

1744
01:14:04,650 --> 01:14:09,790
So if you load up
amazon.com and it asks you

1745
01:14:09,790 --> 01:14:12,090
for a credit card number,
you might just type it in.

1746
01:14:12,090 --> 01:14:14,630
You just forgot to
look for a lock icon,

1747
01:14:14,630 --> 01:14:18,790
whereas if you set forced
HTTPS for amazon.com, then

1748
01:14:18,790 --> 01:14:20,510
there's just not
chance that you'll

1749
01:14:20,510 --> 01:14:24,305
have an HTTP URL for that site.

1750
01:14:24,305 --> 01:14:26,430
It still [? causes a ?]
problem that maybe the user

1751
01:14:26,430 --> 01:14:27,740
doesn't read the URL correctly.

1752
01:14:27,740 --> 01:14:32,350
Like it says Ammazon
with two Ms dot com.

1753
01:14:32,350 --> 01:14:33,670
Probably still fool many users.

1754
01:14:33,670 --> 01:14:39,756
But anyway, that is another
advantage for forced HTTPS.

1755
01:14:39,756 --> 01:14:41,510
Make sense?

1756
01:14:41,510 --> 01:14:43,020
Other questions
about this scheme?

1757
01:14:46,480 --> 01:14:47,740
All right.

1758
01:14:47,740 --> 01:14:50,230
So I guess one
interesting thing is

1759
01:14:50,230 --> 01:14:52,740
how do you get this
forced HTTPS bit

1760
01:14:52,740 --> 01:14:55,470
for a site in the first place?

1761
01:14:55,470 --> 01:14:57,460
Could you have intercepted
that as an attacker

1762
01:14:57,460 --> 01:14:59,780
and prevent that
bit from being set

1763
01:14:59,780 --> 01:15:04,310
if you
[? want to mount a fax? ?]

1764
01:15:04,310 --> 01:15:05,210
Yeah.

1765
01:15:05,210 --> 01:15:06,653
AUDIENCE: [INAUDIBLE] HTTPS.

1766
01:15:06,653 --> 01:15:09,058
I mean, HTTPS, we're
[? assuming ?] [INAUDIBLE]

1767
01:15:09,058 --> 01:15:12,010
protocol [INAUDIBLE].

1768
01:15:12,010 --> 01:15:13,010
PROFESSOR: That's right.

1769
01:15:13,010 --> 01:15:14,900
So on one hand,
this could be good.

1770
01:15:14,900 --> 01:15:16,430
But this forced
https that can only

1771
01:15:16,430 --> 01:15:21,900
be sent over HTTPS connection
to the host in question.

1772
01:15:21,900 --> 01:15:26,160
On other hand, the user might
be fooled at that point.

1773
01:15:26,160 --> 01:15:28,810
Like, he doesn't have
the forced HTTPS bit yet.

1774
01:15:28,810 --> 01:15:33,670
So maybe the user will allow
some incorrect certificate,

1775
01:15:33,670 --> 01:15:38,400
or will not even know that
this is HTTP and not HTTPS.

1776
01:15:38,400 --> 01:15:41,800
So it seems potentially
possible for an attacker

1777
01:15:41,800 --> 01:15:44,220
to prevent that forced
HTTPS bit from being

1778
01:15:44,220 --> 01:15:45,220
sent in the first place.

1779
01:15:45,220 --> 01:15:49,610
If you've never been to a site
and you try to visit that site,

1780
01:15:49,610 --> 01:15:52,780
you might never learn whether
it should be forced HTTPS or not

1781
01:15:52,780 --> 01:15:54,080
in the first place.

1782
01:15:54,080 --> 01:15:54,580
Yeah.

1783
01:15:54,580 --> 01:15:58,000
AUDIENCE: Will the [INAUDIBLE]
roaming certificate there.

1784
01:15:58,000 --> 01:15:59,380
PROFESSOR: That's right, yeah.

1785
01:15:59,380 --> 01:16:02,830
So I guess the way to think
of it is if they did a set,

1786
01:16:02,830 --> 01:16:05,370
then you know you talked to
the right server at some point,

1787
01:16:05,370 --> 01:16:07,942
and then you could continue
using that bit correctly.

1788
01:16:07,942 --> 01:16:10,400
On the other hand, if you don't
have that bit set, or maybe

1789
01:16:10,400 --> 01:16:12,300
if you've never talked
to a server yet,

1790
01:16:12,300 --> 01:16:14,930
there's no clear cut
protocol that will always

1791
01:16:14,930 --> 01:16:18,510
give you whether that forced
HTTPS bit should be set or not.

1792
01:16:18,510 --> 01:16:21,686
Maybe amazon.com always wants
to set that forced HTTPS bit.

1793
01:16:21,686 --> 01:16:23,560
But the first time you
pulled up your laptop,

1794
01:16:23,560 --> 01:16:25,406
you were already on
an attacker's network,

1795
01:16:25,406 --> 01:16:27,780
and there's just no way for
you to connect to amazon.com.

1796
01:16:27,780 --> 01:16:30,280
Everything is intercepted,
or something like this.

1797
01:16:30,280 --> 01:16:32,120
So it's a very hard
problem to solve.

1798
01:16:32,120 --> 01:16:35,850
The bootstrapping of
these security settings

1799
01:16:35,850 --> 01:16:36,840
is pretty tricky.

1800
01:16:36,840 --> 01:16:38,381
I guess one thing
you could try to do

1801
01:16:38,381 --> 01:16:40,720
is maybe embed
this bit in DNSSEC.

1802
01:16:40,720 --> 01:16:42,530
So if you have DNSSEC,
already in use,

1803
01:16:42,530 --> 01:16:46,070
then maybe you could sign
whether you should use HTTPS

1804
01:16:46,070 --> 01:16:50,960
or not, or forced HTTPS or
not, as part of your DNS name.

1805
01:16:50,960 --> 01:16:53,709
But again, it just boils
down the problem to DNSSEC

1806
01:16:53,709 --> 01:16:54,250
being secure.

1807
01:16:54,250 --> 01:16:56,083
So there's always this
sort of rule of trust

1808
01:16:56,083 --> 01:16:58,551
where you have to really
assume that's correct.

1809
01:16:58,551 --> 01:16:59,453
Question.

1810
01:16:59,453 --> 01:17:00,369
AUDIENCE: [INAUDIBLE].

1811
01:17:04,544 --> 01:17:05,210
PROFESSOR: Yeah.

1812
01:17:05,210 --> 01:17:07,540
So I guess Google keeps
trying to improve things

1813
01:17:07,540 --> 01:17:08,520
by hard coding it.

1814
01:17:08,520 --> 01:17:12,490
So one thing that
Chrome offers is

1815
01:17:12,490 --> 01:17:15,840
that actually, the browser
ships with a list of sites that

1816
01:17:15,840 --> 01:17:19,220
should have forced HTTPS
enabled-- or now, well, this

1817
01:17:19,220 --> 01:17:22,720
HSTS thing, which is
[INAUDIBLE] enabled.

1818
01:17:22,720 --> 01:17:24,510
So when you actually
download Chrome,

1819
01:17:24,510 --> 01:17:26,220
you get lots of
actually useful stuff,

1820
01:17:26,220 --> 01:17:30,650
like somewhat up to date CRL
and a list of forced HTTPS

1821
01:17:30,650 --> 01:17:33,220
sites that are
particularly important.

1822
01:17:33,220 --> 01:17:35,779
So this is like somewhat
admitting defeat.

1823
01:17:35,779 --> 01:17:37,070
Like the protocol doesn't work.

1824
01:17:37,070 --> 01:17:40,130
We just have to distribute
this a priori to everyone.

1825
01:17:40,130 --> 01:17:42,360
And it sets up this
unfortunate dichotomy

1826
01:17:42,360 --> 01:17:44,565
between sites that are
sort of important enough

1827
01:17:44,565 --> 01:17:46,530
for Google to ship
with the browser,

1828
01:17:46,530 --> 01:17:49,132
and sites that don't do this.

1829
01:17:49,132 --> 01:17:50,840
Now of course, Google
right now tells you

1830
01:17:50,840 --> 01:17:52,540
that anyone can get
their site included

1831
01:17:52,540 --> 01:17:54,030
because the list is so small.

1832
01:17:54,030 --> 01:17:55,740
But if this grows to
millions of entries,

1833
01:17:55,740 --> 01:17:57,660
I'm sure Google
will stop including

1834
01:17:57,660 --> 01:17:58,850
everyone's site in there.

1835
01:17:58,850 --> 01:18:00,570
But yeah, you could
totally add a domain.

1836
01:18:00,570 --> 01:18:02,320
And you could email
Chrome developers

1837
01:18:02,320 --> 01:18:07,150
and get your thing included on
the list of forced HTTPS URLs.

1838
01:18:07,150 --> 01:18:11,816
Anyway, any other questions
about forced HTTPS and SSL?

1839
01:18:11,816 --> 01:18:12,390
All right.

1840
01:18:12,390 --> 01:18:12,890
Good.

1841
01:18:12,890 --> 01:18:16,502
So I'll see you guys on
Wednesday at the [INAUDIBLE].
